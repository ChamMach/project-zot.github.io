{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"admin-guide/admin-configuration/","text":"Configuring zot \u00b6 The registry administrator configures zot primarily through settings in the configuration file. Using the information in this guide, you can compose a configuration file with the settings and features you require for your zot registry server. Before launching zot with a new configuration, we recommend that you verify the syntax of your configuration as described in Verifying the configuration file . Configuration file \u00b6 The configuration file is a JSON or YAML file that contains all configuration settings for zot functions such as: network storage authentication authorization logging metrics synchronization with other registries clustering The zot service is initiated with the zot serve command followed by the name of a configuration file, as in this example: zot serve config.json Note: The instructions and examples in this guide use zot as the name of the zot executable file. The examples do not include the path to the executable file. When you first build zot or deploy an image or container from the distribution, a basic configuration file config.json is created. This initial file is similar to the following example: { \"distSpecVersion\" : \"1.0.1\" , \"storage\" : { \"rootDirectory\" : \"/tmp/zot\" }, \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" }, \"log\" : { \"level\" : \"debug\" } } The configuration file contains the Distribution Specification version ( distSpecVersion ). The structure and content of other attributes are described in the later sections of this guide. Extensions \u00b6 Additional registry features that are not a part of the Distribution Specification are allowed to be added as Extensions . With a full (not minimal) zot image, the additional extension features can be enabled and configured under an extensions attribute in the configuration file as shown in the following example. { ... \"extensions\" : { \"metrics\" : {}, \"sync\" : {}, \"search\" : {}, \"scrub\" : {} } } Note: The extension features are available only with a full zot image. With a minimal zot image, the extensions section is ignored if present. The following features are configured under the extensions attribute. Metrics Sync Search Scrub An extension feature is enabled by the presence of the feature\u2019s attribute under extensions . An extension feature can be disabled by omitting the feature attribute or by including an enable attribute with a value of false . For example, the scrub feature is enabled in the following cases. \"extensions\" : { \"scrub\" : {} } \"extensions\" : { \"scrub\" : { \"enable\" : true } } The scrub feature is disabled in the following cases. \"extensions\" : { } \"extensions\" : { \"scrub\" : { \"enable\" : false } } Network configuration \u00b6 Use the http attribute in the configuration file to configure the zot network settings, as shown in the following example. \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" , \"realm\" : \"zot\" , \"tls\" : { \"cert\" : \"test/data/server.cert\" , \"key\" : \"test/data/server.key\" } } The following table lists the configurable attributes. Attribute Description address The IP address of the zot server. port The port number of the zot server. realm The security policy domain defined for the server. tls The included attributes in this section specify the Transport Layer Security (TLS) settings for the server. cert The path and filename of the server\u2019s SSL/TLS certificate. key The path and filename of the server\u2019s registry key. Storage configuration \u00b6 Storage options \u00b6 With zot , you have the option to store your registry image files either in local filesystem storage or in cloud storage, such as an Amazon Simple Storage Service (S3) bucket. Configuring local storage \u00b6 Local filesystem storage for zot is configured with the storage attribute in the configuration file, as shown in the following example. \"storage\" :{ \"rootDirectory\" : \"/tmp/zot\" , \"commit\" : true , \"dedupe\" : true , \"gc\" : true , \"gcDelay\" : \"1h\" , \"gcInterval\" : \"24h\" } The following table lists the configurable attributes. Attribute Description rootDirectory Location of the images stored in the server file system. commit For faster performance, data written by `zot` is retained in memory before being periodically committed to disk by the operating system. To eliminate this retention time and cause data to be written to disk immediately, set to true . This prevents data loss but reduces performance. dedupe If the server filesystem supports hard links, you can optimize storage space by enabling inline deduplication of layers and blobs that are shared among multiple container images. Deduplication is enabled by default. Set to false to disable deduplication. gc When an image is deleted, either by tag or by reference, orphaned blobs can lead to wasted storage. Garbage collection (gc) is enabled by default to reclaim this space. Set to false to disable garbage collection. gcDelay (Optional) If garbage collection is enabled, causes it to run once after the specified delay time. The default is 1 hour. Requires the gc attribute to be true . gcInterval (Optional) If garbage collection is enabled, causes periodic collection at the specified interval. Must be set based on use cases and user workloads. If no value is specified, there is no periodic collection. Requires the gc attribute to be true . subpaths You can store and serve images from multiple filesystems, each with their own repository paths and settings. The following example shows three subpaths. \"storage\": { \"subPaths\" : { \"/a\" : { \"rootDirectory\" : \"/tmp/zot1\" , \"dedupe\" : true , \"gc\" : true }, \"/b\" : { \"rootDirectory\" : \"/tmp/zot2\" , \"dedupe\" : true }, \"/c\" : { \"rootDirectory\" : \"/tmp/zot3\" , \"dedupe\" : false } } } Configuring S3 storage \u00b6 Amazon Simple Storage Service (S3) for zot can be configured with the storageDriver attribute in the configuration file, as shown in the following example: \"storageDriver\" : { \"name\" : \"s3\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false , \"accesskey\" : \"<YOUR_ACCESS_KEY_ID>\" , \"secretkey\" : \"<YOUR_SECRET_ACCESS_KEY>\" } As in the case with local filesystem storage, you can use multiple storage locations using the subpath attribute, as in the following example. \"subPaths\" : { \"/a\" : { \"rootDirectory\" : \"/zot-a\" , \"storageDriver\" : { \"name\" : \"s3\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false } }, \"/b\" : { ... } } S3 Credentials \u00b6 In the first configuration file example, the S3 credentials were configured with the attributes accesskey and secretkey. As an alternative, you can omit these attributes from the configuration file and you can configure them using environment variables or a credential file. Environment variables zot looks for credentials in the following environment variables: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN (optional) Credential file A credential file is a plaintext file that contains your access keys, as shown in the following example. [default] aws_access_key_id = <YOUR_DEFAULT_ACCESS_KEY_ID> aws_secret_access_key = <YOUR_DEFAULT_SECRET_ACCESS_KEY> [test-account] aws_access_key_id = <YOUR_TEST_ACCESS_KEY_ID> aws_secret_access_key = <YOUR_TEST_SECRET_ACCESS_KEY> [prod-account] ; work profile aws_access_key_id = <YOUR_PROD_ACCESS_KEY_ID> aws_secret_access_key = <YOUR_PROD_SECRET_ACCESS_KEY> The [default] heading defines credentials for the default profile, which zot will use unless you configure it to use another profile. You can specify a profile using the AWS_PROFILE environment variable as in this example: AWS_PROFILE=test-account The credential file must be named credentials. The file must be located in the .aws/ folder in the home directory of the same server that is running your zot application. For more details about specifying S3 credentials, see the AWS documentation . Security and hardening \u00b6 Authentication \u00b6 zot supports authentication by the following methods: TLS mutual authentication Basic local authentication using an htpasswd file LDAP authentication Bearer (OAuth2) authentication using an HTTP Bearer token For detailed information about configuring authentication for your zot registry, see User Authentication and Authorization with zot . Identity-based authorization \u00b6 User identity can be used as an authorization criterion for allowing actions on one or more repository paths. For specific users, you can choose to allow any combination of read, create, update, or delete actions on specific repository paths. For detailed information about configuring access control policies for your zot registry, see User Authentication and Authorization with zot . Preventing automated attacks with failure delay \u00b6 Use the auth and failDelay attributes under http in the configuration file to delay the response to an authentication failure. A delayed response helps to prevent automated attacks. The configuration is shown in the following example. \"http\" : { \"auth\" : { \"failDelay\" : 5 } } The failDelay attribute specifies a waiting time, in seconds, before zot sends a failure notification to an authenticating user who has been denied access. Rate limiting \u00b6 You can limit the rate of API calls from users by configuring the Ratelimit attribute in the configuration file, as shown in the following example: \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" , \"Ratelimit\" : { \"Rate\" : 10 , \"Methods\" : [ { \"Method\" : \"GET\" , \"Rate\" : 5 } ] } } In this example, the Rate attribute directly under Ratelimit sets a global rate limit of ten API calls per second. You can optionally override the global limit for specific API Methods . In this example, API GET calls are limited to five per second. Additional security features \u00b6 For detailed information about configuring additional security features for your zot registry, see Security Posture . Monitoring \u00b6 zot supports a range of monitoring tools including the following: Logging Logging for zot operations is configured with the log attribute in the configuration file. Metrics Metrics data is available in a Prometheus format. A full zot image with extensions includes a node exporter. A minimal zot image can use an external node exporter such as zxp . Benchmarking The zot project includes the zb tool, which allows you to benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification . For detailed information about the monitoring tools, see Monitoring the registry . Clustering zot \u00b6 To ensure high-availability of the registry, zot supports a clustering scheme with stateless zot instances/replicas fronted by a loadbalancer and a shared remote backend storage. This scheme allows the registry service to remain available even if a few replicas fail or become unavailable. Loadbalancing across many zot replicas can also increase aggregate network throughput. For detailed information about clustering with zot , see zot Clustering . Syncing and mirroring registries \u00b6 Synchronizing registries \u00b6 Add the sync attribute under extensions in the configuration file to enable and configure the periodic or on-demand synchronization of your zot image registry with other image registries, as shown in the following example. \"extensions\" : { \"sync\" : { \"enable\" : true , \"credentialsFile\" : \"./examples/sync-auth-filepath.json\" , \"registries\" : [ { \"urls\" : [ \"https://registry1:5000\" ], \"onDemand\" : false , \"pollInterval\" : \"6h\" , \"tlsVerify\" : true , \"certDir\" : \"/home/user/certs\" , \"maxRetries\" : 5 , \"retryDelay\" : \"10m\" , \"onlySigned\" : true , \"content\" : [ { \"prefix\" : \"/repo1/repo\" , \"tags\" : { \"regex\" : \"4.*\" , \"semver\" : true } }, { \"prefix\" : \"/repo1/repo\" , \"destination\" : \"/localrepo\" , \"stripPrefix\" : true }, { \"prefix\" : \"/repo1/**\" , \"destination\" : \"/localrepo\" , \"stripPrefix\" : true }, { \"prefix\" : \"/repo2/repo*\" }, { \"prefix\" : \"/repo3/**\" }] }, { \"urls\" : [ \"https://registry2:5000\" , \"https://registry3:5000\" ], \"pollInterval\" : \"12h\" , \"tlsVerify\" : false , \"onDemand\" : false , \"content\" : [ { \"prefix\" : \"/repo2\" , \"tags\" : { \"semver\" : true } }] }, { \"urls\" : [ \"https://docker.io/library\" ], \"onDemand\" : true , \"tlsVerify\" : true , \"maxRetries\" : 6 , \"retryDelay\" : \"5m\" }] } } The following table lists the configurable attributes for registry synchronization. Attribute Description enable If this attribute is missing, registry synchronization is enabled by default. Registry synchronization can be disabled by setting this attribute to false . credentialsFile The location of a local credentials file containing credentials for other registries. urls The URL of an upstream image registry. You can specify a comma-separated list of multiple URLs for the same registry in case one or more fails. onDemand false : Pull all images not found in the local registry. true : Pull any image not found in the local registry only when needed. pollInterval The period in seconds between polling of remote registries. If no value is specified, no periodic polling will occur. tlsVerify false : TLS will not be verified. true : (Default) TLS will be verified. certDir If a path is specified, use certificates at this path. If no path is specified, use the default certificates directory. maxRetries The maximum number of retries if an error occurs during either an on-demand or periodic synchronization. If no value is specified, no retries will occur. retryDelay The interval in seconds between retries. This attribute is mandatory when maxRetries is configured. onlySigned false : Synchronize signed or unsigned images. true : Synchronize only signed images (either notary or cosigned). content The included attributes in this section specify which content will be periodically pulled. If this section is not populated, periodically polling will not occur. The included attributes can also filter which on-demand images are pulled. prefix On the remote server, the path from which images will be pulled. This path can be a string that exactly matches the remote path, or it can be a glob pattern. For example, the path can include a wildcard ( * ) or a recursive wildcard ( ** ). destination Specifies the path under which pulled images are to be stored. stripPrefix Specifies whether the prefix path from the source registry will be retained or replaced when the image is stored in the [zotLowerName] registry. false : Retain the source prefix, append it to the destination path. true : Remove the source prefix. Note: If the source prefix was specified with meta-characters (such as ** ), only the prefix segments that precede the meta-characters are removed. Any remaining path segments are appended to the destination path. tags The included attributes in this optional section specify how remote images will be selected for synchronization based on image tags. regex Specifies a regular expression for matching image tags. Images whose tags do not match the expression are not pulled. semver Specifies whether image tags are to be filtered by Semantic Versioning (semver) compliance. false : Do not filter by semantic versioning true : Filter by semantic versioning Linting uploaded images \u00b6 The lint extension can check an uploaded image to enforce the presence of required annotations such as the author or the license. To configure linting, add the lint attribute under extensions in the configuration file, as shown in the following example: \"extensions\" : { \"lint\" : { \"enable\" : true , \"mandatoryAnnotations\" : [ \"annot1\" , \"annot2\" , \"annot3\" ] } } The following table lists the configurable attributes of the lint extension. Attribute Description enable If this attribute is missing, incoming image linting is disabled by default. Linting can be enabled by including this attribute and setting it to true . mandatoryAnnotations A list of annotations that are required to be present in the image being pushed to the repository. If the mandatory annotations option is configured when you push an image, linter will verify that the mandatory annotations list present in the configuration is also found in the manifest's annotations list. If any annotations are missing, the push is denied. Scrubbing the image registry \u00b6 To check the integrity of the filesystem and the data in the registry, you can schedule a periodic scrub operation. The scrub process traverses the filesystem, verifying that all data blocks are readable. While running, the process may slightly reduce the registry performance. To enable scrubbing, add the scrub attribute under extensions in the configuration file, as shown in the following example: \"extensions\" : { \"scrub\" : { \"enable\" : true , \"interval\" : \"24h\" } } The following table lists the configurable attributes for scrubbing the registry. Attribute Description enable If this attribute is missing, registry scrubbing is enabled by default. Scrubbing can be disabled by setting this attribute to false . interval The time interval between periodic scrub operations. This value must be at least two hours ( 2h ). Enhanced searching and querying images \u00b6 While basic searching is always enabled for images in the zot registry, you can enable enhanced registry searching and filtering using graphQL. Add the search attribute under extensions in the configuration file to enable and configure the enhanced search extension, as shown in the following example. \"extensions\" : { \"search\" : { \"enable\" : true , \"cve\" : { \"updateInterval\" : \"2h\" } } } The following table lists the configurable attributes for enhanced search. Attribute Description enable If this attribute is missing, enhanced search is enabled by default. Enhanced search can be disabled by setting this attribute to false . cve Extends enhanced search to allow searching of Common Vulnerabilities and Exposures (CVE). updateInterval Sets the interval at which the searchable database of CVE items is refreshed. Verifying the configuration file \u00b6 Before launching zot , verify the syntax of your configuration file using the following command: zot verify <configfile> Note: Verifying the configuration file protects against operator errors and any conflicts arising from zot release version changes. After verifying your configuration file, you can launch zot with the following command: zot serve <configfile>","title":"Configuring zot"},{"location":"admin-guide/admin-configuration/#configuring-zot","text":"The registry administrator configures zot primarily through settings in the configuration file. Using the information in this guide, you can compose a configuration file with the settings and features you require for your zot registry server. Before launching zot with a new configuration, we recommend that you verify the syntax of your configuration as described in Verifying the configuration file .","title":"Configuring zot"},{"location":"admin-guide/admin-configuration/#configuration-file","text":"The configuration file is a JSON or YAML file that contains all configuration settings for zot functions such as: network storage authentication authorization logging metrics synchronization with other registries clustering The zot service is initiated with the zot serve command followed by the name of a configuration file, as in this example: zot serve config.json Note: The instructions and examples in this guide use zot as the name of the zot executable file. The examples do not include the path to the executable file. When you first build zot or deploy an image or container from the distribution, a basic configuration file config.json is created. This initial file is similar to the following example: { \"distSpecVersion\" : \"1.0.1\" , \"storage\" : { \"rootDirectory\" : \"/tmp/zot\" }, \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" }, \"log\" : { \"level\" : \"debug\" } } The configuration file contains the Distribution Specification version ( distSpecVersion ). The structure and content of other attributes are described in the later sections of this guide.","title":"Configuration file"},{"location":"admin-guide/admin-configuration/#extensions","text":"Additional registry features that are not a part of the Distribution Specification are allowed to be added as Extensions . With a full (not minimal) zot image, the additional extension features can be enabled and configured under an extensions attribute in the configuration file as shown in the following example. { ... \"extensions\" : { \"metrics\" : {}, \"sync\" : {}, \"search\" : {}, \"scrub\" : {} } } Note: The extension features are available only with a full zot image. With a minimal zot image, the extensions section is ignored if present. The following features are configured under the extensions attribute. Metrics Sync Search Scrub An extension feature is enabled by the presence of the feature\u2019s attribute under extensions . An extension feature can be disabled by omitting the feature attribute or by including an enable attribute with a value of false . For example, the scrub feature is enabled in the following cases. \"extensions\" : { \"scrub\" : {} } \"extensions\" : { \"scrub\" : { \"enable\" : true } } The scrub feature is disabled in the following cases. \"extensions\" : { } \"extensions\" : { \"scrub\" : { \"enable\" : false } }","title":"Extensions"},{"location":"admin-guide/admin-configuration/#network-configuration","text":"Use the http attribute in the configuration file to configure the zot network settings, as shown in the following example. \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" , \"realm\" : \"zot\" , \"tls\" : { \"cert\" : \"test/data/server.cert\" , \"key\" : \"test/data/server.key\" } } The following table lists the configurable attributes. Attribute Description address The IP address of the zot server. port The port number of the zot server. realm The security policy domain defined for the server. tls The included attributes in this section specify the Transport Layer Security (TLS) settings for the server. cert The path and filename of the server\u2019s SSL/TLS certificate. key The path and filename of the server\u2019s registry key.","title":"Network configuration"},{"location":"admin-guide/admin-configuration/#storage-configuration","text":"","title":"Storage configuration"},{"location":"admin-guide/admin-configuration/#storage-options","text":"With zot , you have the option to store your registry image files either in local filesystem storage or in cloud storage, such as an Amazon Simple Storage Service (S3) bucket.","title":"Storage options"},{"location":"admin-guide/admin-configuration/#configuring-local-storage","text":"Local filesystem storage for zot is configured with the storage attribute in the configuration file, as shown in the following example. \"storage\" :{ \"rootDirectory\" : \"/tmp/zot\" , \"commit\" : true , \"dedupe\" : true , \"gc\" : true , \"gcDelay\" : \"1h\" , \"gcInterval\" : \"24h\" } The following table lists the configurable attributes. Attribute Description rootDirectory Location of the images stored in the server file system. commit For faster performance, data written by `zot` is retained in memory before being periodically committed to disk by the operating system. To eliminate this retention time and cause data to be written to disk immediately, set to true . This prevents data loss but reduces performance. dedupe If the server filesystem supports hard links, you can optimize storage space by enabling inline deduplication of layers and blobs that are shared among multiple container images. Deduplication is enabled by default. Set to false to disable deduplication. gc When an image is deleted, either by tag or by reference, orphaned blobs can lead to wasted storage. Garbage collection (gc) is enabled by default to reclaim this space. Set to false to disable garbage collection. gcDelay (Optional) If garbage collection is enabled, causes it to run once after the specified delay time. The default is 1 hour. Requires the gc attribute to be true . gcInterval (Optional) If garbage collection is enabled, causes periodic collection at the specified interval. Must be set based on use cases and user workloads. If no value is specified, there is no periodic collection. Requires the gc attribute to be true . subpaths You can store and serve images from multiple filesystems, each with their own repository paths and settings. The following example shows three subpaths. \"storage\": { \"subPaths\" : { \"/a\" : { \"rootDirectory\" : \"/tmp/zot1\" , \"dedupe\" : true , \"gc\" : true }, \"/b\" : { \"rootDirectory\" : \"/tmp/zot2\" , \"dedupe\" : true }, \"/c\" : { \"rootDirectory\" : \"/tmp/zot3\" , \"dedupe\" : false } } }","title":"Configuring local storage"},{"location":"admin-guide/admin-configuration/#configuring-s3-storage","text":"Amazon Simple Storage Service (S3) for zot can be configured with the storageDriver attribute in the configuration file, as shown in the following example: \"storageDriver\" : { \"name\" : \"s3\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false , \"accesskey\" : \"<YOUR_ACCESS_KEY_ID>\" , \"secretkey\" : \"<YOUR_SECRET_ACCESS_KEY>\" } As in the case with local filesystem storage, you can use multiple storage locations using the subpath attribute, as in the following example. \"subPaths\" : { \"/a\" : { \"rootDirectory\" : \"/zot-a\" , \"storageDriver\" : { \"name\" : \"s3\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false } }, \"/b\" : { ... } }","title":"Configuring S3 storage"},{"location":"admin-guide/admin-configuration/#s3-credentials","text":"In the first configuration file example, the S3 credentials were configured with the attributes accesskey and secretkey. As an alternative, you can omit these attributes from the configuration file and you can configure them using environment variables or a credential file. Environment variables zot looks for credentials in the following environment variables: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN (optional) Credential file A credential file is a plaintext file that contains your access keys, as shown in the following example. [default] aws_access_key_id = <YOUR_DEFAULT_ACCESS_KEY_ID> aws_secret_access_key = <YOUR_DEFAULT_SECRET_ACCESS_KEY> [test-account] aws_access_key_id = <YOUR_TEST_ACCESS_KEY_ID> aws_secret_access_key = <YOUR_TEST_SECRET_ACCESS_KEY> [prod-account] ; work profile aws_access_key_id = <YOUR_PROD_ACCESS_KEY_ID> aws_secret_access_key = <YOUR_PROD_SECRET_ACCESS_KEY> The [default] heading defines credentials for the default profile, which zot will use unless you configure it to use another profile. You can specify a profile using the AWS_PROFILE environment variable as in this example: AWS_PROFILE=test-account The credential file must be named credentials. The file must be located in the .aws/ folder in the home directory of the same server that is running your zot application. For more details about specifying S3 credentials, see the AWS documentation .","title":"S3 Credentials"},{"location":"admin-guide/admin-configuration/#security-and-hardening","text":"","title":"Security and hardening"},{"location":"admin-guide/admin-configuration/#authentication","text":"zot supports authentication by the following methods: TLS mutual authentication Basic local authentication using an htpasswd file LDAP authentication Bearer (OAuth2) authentication using an HTTP Bearer token For detailed information about configuring authentication for your zot registry, see User Authentication and Authorization with zot .","title":"Authentication"},{"location":"admin-guide/admin-configuration/#identity-based-authorization","text":"User identity can be used as an authorization criterion for allowing actions on one or more repository paths. For specific users, you can choose to allow any combination of read, create, update, or delete actions on specific repository paths. For detailed information about configuring access control policies for your zot registry, see User Authentication and Authorization with zot .","title":"Identity-based authorization"},{"location":"admin-guide/admin-configuration/#preventing-automated-attacks-with-failure-delay","text":"Use the auth and failDelay attributes under http in the configuration file to delay the response to an authentication failure. A delayed response helps to prevent automated attacks. The configuration is shown in the following example. \"http\" : { \"auth\" : { \"failDelay\" : 5 } } The failDelay attribute specifies a waiting time, in seconds, before zot sends a failure notification to an authenticating user who has been denied access.","title":"Preventing automated attacks with failure delay"},{"location":"admin-guide/admin-configuration/#rate-limiting","text":"You can limit the rate of API calls from users by configuring the Ratelimit attribute in the configuration file, as shown in the following example: \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" , \"Ratelimit\" : { \"Rate\" : 10 , \"Methods\" : [ { \"Method\" : \"GET\" , \"Rate\" : 5 } ] } } In this example, the Rate attribute directly under Ratelimit sets a global rate limit of ten API calls per second. You can optionally override the global limit for specific API Methods . In this example, API GET calls are limited to five per second.","title":"Rate limiting"},{"location":"admin-guide/admin-configuration/#additional-security-features","text":"For detailed information about configuring additional security features for your zot registry, see Security Posture .","title":"Additional security features"},{"location":"admin-guide/admin-configuration/#monitoring","text":"zot supports a range of monitoring tools including the following: Logging Logging for zot operations is configured with the log attribute in the configuration file. Metrics Metrics data is available in a Prometheus format. A full zot image with extensions includes a node exporter. A minimal zot image can use an external node exporter such as zxp . Benchmarking The zot project includes the zb tool, which allows you to benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification . For detailed information about the monitoring tools, see Monitoring the registry .","title":"Monitoring"},{"location":"admin-guide/admin-configuration/#clustering-zot","text":"To ensure high-availability of the registry, zot supports a clustering scheme with stateless zot instances/replicas fronted by a loadbalancer and a shared remote backend storage. This scheme allows the registry service to remain available even if a few replicas fail or become unavailable. Loadbalancing across many zot replicas can also increase aggregate network throughput. For detailed information about clustering with zot , see zot Clustering .","title":"Clustering zot"},{"location":"admin-guide/admin-configuration/#syncing-and-mirroring-registries","text":"","title":"Syncing and mirroring registries"},{"location":"admin-guide/admin-configuration/#synchronizing-registries","text":"Add the sync attribute under extensions in the configuration file to enable and configure the periodic or on-demand synchronization of your zot image registry with other image registries, as shown in the following example. \"extensions\" : { \"sync\" : { \"enable\" : true , \"credentialsFile\" : \"./examples/sync-auth-filepath.json\" , \"registries\" : [ { \"urls\" : [ \"https://registry1:5000\" ], \"onDemand\" : false , \"pollInterval\" : \"6h\" , \"tlsVerify\" : true , \"certDir\" : \"/home/user/certs\" , \"maxRetries\" : 5 , \"retryDelay\" : \"10m\" , \"onlySigned\" : true , \"content\" : [ { \"prefix\" : \"/repo1/repo\" , \"tags\" : { \"regex\" : \"4.*\" , \"semver\" : true } }, { \"prefix\" : \"/repo1/repo\" , \"destination\" : \"/localrepo\" , \"stripPrefix\" : true }, { \"prefix\" : \"/repo1/**\" , \"destination\" : \"/localrepo\" , \"stripPrefix\" : true }, { \"prefix\" : \"/repo2/repo*\" }, { \"prefix\" : \"/repo3/**\" }] }, { \"urls\" : [ \"https://registry2:5000\" , \"https://registry3:5000\" ], \"pollInterval\" : \"12h\" , \"tlsVerify\" : false , \"onDemand\" : false , \"content\" : [ { \"prefix\" : \"/repo2\" , \"tags\" : { \"semver\" : true } }] }, { \"urls\" : [ \"https://docker.io/library\" ], \"onDemand\" : true , \"tlsVerify\" : true , \"maxRetries\" : 6 , \"retryDelay\" : \"5m\" }] } } The following table lists the configurable attributes for registry synchronization. Attribute Description enable If this attribute is missing, registry synchronization is enabled by default. Registry synchronization can be disabled by setting this attribute to false . credentialsFile The location of a local credentials file containing credentials for other registries. urls The URL of an upstream image registry. You can specify a comma-separated list of multiple URLs for the same registry in case one or more fails. onDemand false : Pull all images not found in the local registry. true : Pull any image not found in the local registry only when needed. pollInterval The period in seconds between polling of remote registries. If no value is specified, no periodic polling will occur. tlsVerify false : TLS will not be verified. true : (Default) TLS will be verified. certDir If a path is specified, use certificates at this path. If no path is specified, use the default certificates directory. maxRetries The maximum number of retries if an error occurs during either an on-demand or periodic synchronization. If no value is specified, no retries will occur. retryDelay The interval in seconds between retries. This attribute is mandatory when maxRetries is configured. onlySigned false : Synchronize signed or unsigned images. true : Synchronize only signed images (either notary or cosigned). content The included attributes in this section specify which content will be periodically pulled. If this section is not populated, periodically polling will not occur. The included attributes can also filter which on-demand images are pulled. prefix On the remote server, the path from which images will be pulled. This path can be a string that exactly matches the remote path, or it can be a glob pattern. For example, the path can include a wildcard ( * ) or a recursive wildcard ( ** ). destination Specifies the path under which pulled images are to be stored. stripPrefix Specifies whether the prefix path from the source registry will be retained or replaced when the image is stored in the [zotLowerName] registry. false : Retain the source prefix, append it to the destination path. true : Remove the source prefix. Note: If the source prefix was specified with meta-characters (such as ** ), only the prefix segments that precede the meta-characters are removed. Any remaining path segments are appended to the destination path. tags The included attributes in this optional section specify how remote images will be selected for synchronization based on image tags. regex Specifies a regular expression for matching image tags. Images whose tags do not match the expression are not pulled. semver Specifies whether image tags are to be filtered by Semantic Versioning (semver) compliance. false : Do not filter by semantic versioning true : Filter by semantic versioning","title":"Synchronizing registries"},{"location":"admin-guide/admin-configuration/#linting-uploaded-images","text":"The lint extension can check an uploaded image to enforce the presence of required annotations such as the author or the license. To configure linting, add the lint attribute under extensions in the configuration file, as shown in the following example: \"extensions\" : { \"lint\" : { \"enable\" : true , \"mandatoryAnnotations\" : [ \"annot1\" , \"annot2\" , \"annot3\" ] } } The following table lists the configurable attributes of the lint extension. Attribute Description enable If this attribute is missing, incoming image linting is disabled by default. Linting can be enabled by including this attribute and setting it to true . mandatoryAnnotations A list of annotations that are required to be present in the image being pushed to the repository. If the mandatory annotations option is configured when you push an image, linter will verify that the mandatory annotations list present in the configuration is also found in the manifest's annotations list. If any annotations are missing, the push is denied.","title":"Linting uploaded images"},{"location":"admin-guide/admin-configuration/#scrubbing-the-image-registry","text":"To check the integrity of the filesystem and the data in the registry, you can schedule a periodic scrub operation. The scrub process traverses the filesystem, verifying that all data blocks are readable. While running, the process may slightly reduce the registry performance. To enable scrubbing, add the scrub attribute under extensions in the configuration file, as shown in the following example: \"extensions\" : { \"scrub\" : { \"enable\" : true , \"interval\" : \"24h\" } } The following table lists the configurable attributes for scrubbing the registry. Attribute Description enable If this attribute is missing, registry scrubbing is enabled by default. Scrubbing can be disabled by setting this attribute to false . interval The time interval between periodic scrub operations. This value must be at least two hours ( 2h ).","title":"Scrubbing the image registry"},{"location":"admin-guide/admin-configuration/#enhanced-searching-and-querying-images","text":"While basic searching is always enabled for images in the zot registry, you can enable enhanced registry searching and filtering using graphQL. Add the search attribute under extensions in the configuration file to enable and configure the enhanced search extension, as shown in the following example. \"extensions\" : { \"search\" : { \"enable\" : true , \"cve\" : { \"updateInterval\" : \"2h\" } } } The following table lists the configurable attributes for enhanced search. Attribute Description enable If this attribute is missing, enhanced search is enabled by default. Enhanced search can be disabled by setting this attribute to false . cve Extends enhanced search to allow searching of Common Vulnerabilities and Exposures (CVE). updateInterval Sets the interval at which the searchable database of CVE items is refreshed.","title":"Enhanced searching and querying images"},{"location":"admin-guide/admin-configuration/#verifying-the-configuration-file","text":"Before launching zot , verify the syntax of your configuration file using the following command: zot verify <configfile> Note: Verifying the configuration file protects against operator errors and any conflicts arising from zot release version changes. After verifying your configuration file, you can launch zot with the following command: zot serve <configfile>","title":"Verifying the configuration file"},{"location":"admin-guide/admin-getting-started/","text":"Getting Started with zot Administration \u00b6 This document helps you to deploy an appropriate zot image or to build zot if desired. After deploying zot , proceed to Configuring zot to choose and configure the features you need. Installing zot \u00b6 How to get zot \u00b6 The zot project is hosted on GitHub at project-zot . From GitHub, you can download zot executable binary images or full source code. Supported platforms \u00b6 zot is officially supported on Linux and Apple MacOS platforms, using Intel or ARM processors. However, development should be possible on any platform that supports the golang toolchain. OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS About binary images \u00b6 Executable binary zot images are available for multiple platforms and architectures and with full or minimal implementations. Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats. Deployment methods \u00b6 Several options exist for deploying zot : You can launch a zot binary as a container service using a container management tool such as Podman, Docker, or Helm. You can launch zot as a host-level service by downloading a binary image and running it as a systemd service. You can copy or clone the full zot source code and build an image with custom build flags. Deploying a zot binary image \u00b6 Executable binary images for supported server platforms and architectures are available from the zot package repository in GitHub. You can download the appropriate binary image and run it directly on your server, or you can use a container management tool such as Podman, runc, Helm, or Docker to fetch and deploy the image in a container on your server. Tip: For convenience, you can rename the binary image file to simply zot. Example: Deploying with a container manager \u00b6 Using a container manager such as Podman, runc, Helm, or Docker, you can install a zot binary image, as in the following examples. Using Podman podman run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64:latest podman run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64-minimal:latest Using Docker docker run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64:latest Each of these example commands pulls a zot binary image from the GitHub Container Registry (ghcr.io) and launches a zot image registry at http://localhost:5000 . Building zot from source \u00b6 Prerequisites \u00b6 Install golang (1.17+) \u00b6 The zot project requires golang 1.17 or newer. You can follow these instructions to install the golang toolchain. After installation, make sure that the path environment variable or your IDE can find the toolchain. Building an executable binary from source \u00b6 Download or clone the full zot project from GitHub at project-zot . To clone the zot project from GitHub, use this command: git clone https://github.com/project-zot/zot.git To build zot , execute the make command in the zot directory using the following general syntax: make OS=os ARCH=architecture {binary | binary-minimal} The operating system and architecture options are listed in the Supported platforms and architectures table. If an option is not specified, the defaults are linux and amd64 . The binary option builds the full zot binary image with all extensions. The binary-minimal option builds the minimal distribution-spec conformant zot binary image without extensions, reducing the attack surface. For example, to build a zot image with extensions for an Intel-based linux server, use the following command: make OS=linux ARCH=amd64 binary The make command builds an executable image in the zot/bin directory. The original filename of the zot executable image will indicate the build options. For example, the filename of an Intel-based linux minimal image is zot-linux-amd64-minimal . Tip: For convenience, you can rename the binary image file to simply zot . Building a zot container image from source \u00b6 with Stacker Using the settings in stacker.yaml, you can build a container image that runs the latest zot by running the following command: make binary-stacker with Docker A sample Dockerfile is provided on the zot project page in GitHub. You can edit the sample file with your specific values, such as the desired operating system, hardware architecture, and full or minimal build, as in this example: ARG OS=linux ARG ARCH=amd64 RUN make COMMIT=$COMMIT OS=$OS ARCH=$ARCH clean binary-minimal Using your edited Dockerfile, you can build a container image that runs the latest zot by running the following command: make image Deploying the container image \u00b6 Deploy the image using your container manager, such as Podman, runc, Helm, or Docker, as in these examples: with Podman podman run --rm -it -p 5000:5000 -v $(pwd)/registry:/var/lib/registry zot:latest with Docker docker run --rm -it -p 5000:5000 -v $(pwd)/registry:/var/lib/registry zot:latest A container image built with the sample Dockerfile and deployed with the example command results in a running registry at http://localhost:5000 . Registry content is stored at .registry , which is bind mounted to /var/lib/registry in the container. By default, auth is disabled. As part of the build, a YAML configuration file is created at /etc/zot/config.yml in the container. You can override the configuration file with custom configuration settings in the deployment command and in a local configuration file as shown in this example: podman run --rm -p 8080:8080 \\ -v $(pwd)/custom-config.yml:/etc/zot/config.yml \\ -v $(pwd)/registry:/tmp/zot \\ zot:latest This command causes the registry to listen on port 8080 and to use /tmp/zot for content storage. Additional recommended steps \u00b6 We recommend that, when deploying zot , you also install the command line ( zli ) and benchmarking ( zb ) packages. Launching zot \u00b6 The zot service is initiated with the zot serve command followed by the name of a configuration file, as in this example: zot serve config.yml Note: For convenience, you can rename the binary image file to simply zot .The instructions and examples in this guide use zot as the name of the zot executable file and do not include the path to the executable file. Next Steps \u00b6 Configuring zot \u00b6 You configure zot primarily through adding and modifying settings in the zot configuration file. The configuration file is a JSON or YAML file that contains all configuration settings for zot functions. When you first build zot or deploy an image or container from the distribution, a basic configuration file config.json is created. You can modify the initial file or you can create a new file. Follow the instructions in Configuring zot , to compose a configuration file with the settings and features you require for your zot registry server.","title":"Getting Started"},{"location":"admin-guide/admin-getting-started/#getting-started-with-zot-administration","text":"This document helps you to deploy an appropriate zot image or to build zot if desired. After deploying zot , proceed to Configuring zot to choose and configure the features you need.","title":"Getting Started with zot Administration"},{"location":"admin-guide/admin-getting-started/#installing-zot","text":"","title":"Installing zot"},{"location":"admin-guide/admin-getting-started/#how-to-get-zot","text":"The zot project is hosted on GitHub at project-zot . From GitHub, you can download zot executable binary images or full source code.","title":"How to get zot"},{"location":"admin-guide/admin-getting-started/#supported-platforms","text":"zot is officially supported on Linux and Apple MacOS platforms, using Intel or ARM processors. However, development should be possible on any platform that supports the golang toolchain. OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS","title":"Supported platforms"},{"location":"admin-guide/admin-getting-started/#about-binary-images","text":"Executable binary zot images are available for multiple platforms and architectures and with full or minimal implementations. Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats.","title":"About binary images"},{"location":"admin-guide/admin-getting-started/#deployment-methods","text":"Several options exist for deploying zot : You can launch a zot binary as a container service using a container management tool such as Podman, Docker, or Helm. You can launch zot as a host-level service by downloading a binary image and running it as a systemd service. You can copy or clone the full zot source code and build an image with custom build flags.","title":"Deployment methods"},{"location":"admin-guide/admin-getting-started/#deploying-a-zot-binary-image","text":"Executable binary images for supported server platforms and architectures are available from the zot package repository in GitHub. You can download the appropriate binary image and run it directly on your server, or you can use a container management tool such as Podman, runc, Helm, or Docker to fetch and deploy the image in a container on your server. Tip: For convenience, you can rename the binary image file to simply zot.","title":"Deploying a zot binary image"},{"location":"admin-guide/admin-getting-started/#example-deploying-with-a-container-manager","text":"Using a container manager such as Podman, runc, Helm, or Docker, you can install a zot binary image, as in the following examples. Using Podman podman run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64:latest podman run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64-minimal:latest Using Docker docker run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64:latest Each of these example commands pulls a zot binary image from the GitHub Container Registry (ghcr.io) and launches a zot image registry at http://localhost:5000 .","title":"Example: Deploying with a container manager"},{"location":"admin-guide/admin-getting-started/#building-zot-from-source","text":"","title":"Building zot from source"},{"location":"admin-guide/admin-getting-started/#prerequisites","text":"","title":"Prerequisites"},{"location":"admin-guide/admin-getting-started/#install-golang-117","text":"The zot project requires golang 1.17 or newer. You can follow these instructions to install the golang toolchain. After installation, make sure that the path environment variable or your IDE can find the toolchain.","title":"Install golang (1.17+)"},{"location":"admin-guide/admin-getting-started/#building-an-executable-binary-from-source","text":"Download or clone the full zot project from GitHub at project-zot . To clone the zot project from GitHub, use this command: git clone https://github.com/project-zot/zot.git To build zot , execute the make command in the zot directory using the following general syntax: make OS=os ARCH=architecture {binary | binary-minimal} The operating system and architecture options are listed in the Supported platforms and architectures table. If an option is not specified, the defaults are linux and amd64 . The binary option builds the full zot binary image with all extensions. The binary-minimal option builds the minimal distribution-spec conformant zot binary image without extensions, reducing the attack surface. For example, to build a zot image with extensions for an Intel-based linux server, use the following command: make OS=linux ARCH=amd64 binary The make command builds an executable image in the zot/bin directory. The original filename of the zot executable image will indicate the build options. For example, the filename of an Intel-based linux minimal image is zot-linux-amd64-minimal . Tip: For convenience, you can rename the binary image file to simply zot .","title":"Building an executable binary from source"},{"location":"admin-guide/admin-getting-started/#building-a-zot-container-image-from-source","text":"with Stacker Using the settings in stacker.yaml, you can build a container image that runs the latest zot by running the following command: make binary-stacker with Docker A sample Dockerfile is provided on the zot project page in GitHub. You can edit the sample file with your specific values, such as the desired operating system, hardware architecture, and full or minimal build, as in this example: ARG OS=linux ARG ARCH=amd64 RUN make COMMIT=$COMMIT OS=$OS ARCH=$ARCH clean binary-minimal Using your edited Dockerfile, you can build a container image that runs the latest zot by running the following command: make image","title":"Building a zot container image from source"},{"location":"admin-guide/admin-getting-started/#deploying-the-container-image","text":"Deploy the image using your container manager, such as Podman, runc, Helm, or Docker, as in these examples: with Podman podman run --rm -it -p 5000:5000 -v $(pwd)/registry:/var/lib/registry zot:latest with Docker docker run --rm -it -p 5000:5000 -v $(pwd)/registry:/var/lib/registry zot:latest A container image built with the sample Dockerfile and deployed with the example command results in a running registry at http://localhost:5000 . Registry content is stored at .registry , which is bind mounted to /var/lib/registry in the container. By default, auth is disabled. As part of the build, a YAML configuration file is created at /etc/zot/config.yml in the container. You can override the configuration file with custom configuration settings in the deployment command and in a local configuration file as shown in this example: podman run --rm -p 8080:8080 \\ -v $(pwd)/custom-config.yml:/etc/zot/config.yml \\ -v $(pwd)/registry:/tmp/zot \\ zot:latest This command causes the registry to listen on port 8080 and to use /tmp/zot for content storage.","title":"Deploying the container image"},{"location":"admin-guide/admin-getting-started/#additional-recommended-steps","text":"We recommend that, when deploying zot , you also install the command line ( zli ) and benchmarking ( zb ) packages.","title":"Additional recommended steps"},{"location":"admin-guide/admin-getting-started/#launching-zot","text":"The zot service is initiated with the zot serve command followed by the name of a configuration file, as in this example: zot serve config.yml Note: For convenience, you can rename the binary image file to simply zot .The instructions and examples in this guide use zot as the name of the zot executable file and do not include the path to the executable file.","title":"Launching zot"},{"location":"admin-guide/admin-getting-started/#next-steps","text":"","title":"Next Steps"},{"location":"admin-guide/admin-getting-started/#configuring-zot","text":"You configure zot primarily through adding and modifying settings in the zot configuration file. The configuration file is a JSON or YAML file that contains all configuration settings for zot functions. When you first build zot or deploy an image or container from the distribution, a basic configuration file config.json is created. You can modify the initial file or you can create a new file. Follow the instructions in Configuring zot , to compose a configuration file with the settings and features you require for your zot registry server.","title":"Configuring zot"},{"location":"admin-guide/admin-monitoring/","text":"Monitoring the registry \u00b6 zot supports a range of monitoring tools including logging, metrics, and benchmarking. Logging \u00b6 Logging for zot operations is configured with the log attribute in the configuration file, as shown in the following example. \"log\" :{ \"level\" : \"debug\" , \"output\" : \"/tmp/zot.log\" , \"audit\" : \"/tmp/zot-audit.log\" } The following table lists the configurable attributes. Attribute Description level The minimum level for logged events. The levels are: panic, fatal, error, warn, info, debug, and trace. output The filesystem path for the log output file. The default is stdout . audit (Optional) If a filesystem path is specified for audit logging, an audit log is enabled and will be stored at the specified path. Metrics \u00b6 The available methods for collecting metrics varies depending on whether your zot installation is a minimal (distribution-spec-only) image or a full image including extensions. Enabling metrics for a full zot image with extensions \u00b6 Add the metrics attribute under extensions in the configuration file to enable and configure metrics, as shown in the following example. \"extensions\" : { \"metrics\" : { \"enable\" : true , \"prometheus\" : { \"path\" : \"/metrics\" } } } The following table lists the configurable attributes for metrics collection. Attribute Description enable If this attribute is missing, metrics collection is enabled by default. Metrics collection can be disabled by setting this attribute to false . prometheus Attributes under prometheus contain configuration settings for the Prometheus node exporter. path The server path on which metrics will be exposed. Collecting metrics from a minimal zot image using a node exporter \u00b6 Although a minimal zot image does not contain a node exporter, it exposes internal metrics in a Prometheus format for collection by a separate node exporter tool such as zxp. The zot companion binary zxp is a node exporter that can be deployed with a minimal zot image in order to scrape metrics from the zot server. Metrics are automatically enabled in the zot server upon first scrape from the node exporter and the metrics are automatically disabled when the node exporter has not performed any scraping for some period. No extra zot configuration is needed for this behavior. You can download the zxp executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page. The binary image is named using the target platform and architecture. For example, the binary for an Intel-based MacOS server is zxp-darwin-amd64 . To configure the zxp example image, run this command: zxp-darwin-amd64 config zxp-config-file Tip: For convenience, you can rename the binary image file to simply zxp. Tip: A sample Dockerfile for zxp is available at Dockerfile-zxp . The configuration file of zxp contains connection details for the zot server from which it will scrape metrics. The following JSON structure is an example of the zxp-config-file contents: { \"Server\" : { \"protocol\" : \"http\" , \"host\" : \"127.0.0.1\" , \"port\" : \"8080\" }, \"Exporter\" : { \"port\" : \"8081\" , \"log\" : { \"level\" : \"debug\" } } } Tip: The zxp module does not have Prometheus integration. The zxp module is not needed with a full zot image. Benchmarking zot with zb \u00b6 The zot project includes the zb tool, which allows you to benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification published by the Open Container Initiative (OCI). The zb tool is useful for benchmarking zot registry workloads in scenarios such as the following: comparing configuration changes comparing software versions comparing hardware/deployment environments comparing with other registries For detailed information about benchmarking with zb , see Benchmarking zot with zb .","title":"Monitoring"},{"location":"admin-guide/admin-monitoring/#monitoring-the-registry","text":"zot supports a range of monitoring tools including logging, metrics, and benchmarking.","title":"Monitoring the registry"},{"location":"admin-guide/admin-monitoring/#logging","text":"Logging for zot operations is configured with the log attribute in the configuration file, as shown in the following example. \"log\" :{ \"level\" : \"debug\" , \"output\" : \"/tmp/zot.log\" , \"audit\" : \"/tmp/zot-audit.log\" } The following table lists the configurable attributes. Attribute Description level The minimum level for logged events. The levels are: panic, fatal, error, warn, info, debug, and trace. output The filesystem path for the log output file. The default is stdout . audit (Optional) If a filesystem path is specified for audit logging, an audit log is enabled and will be stored at the specified path.","title":"Logging"},{"location":"admin-guide/admin-monitoring/#metrics","text":"The available methods for collecting metrics varies depending on whether your zot installation is a minimal (distribution-spec-only) image or a full image including extensions.","title":"Metrics"},{"location":"admin-guide/admin-monitoring/#enabling-metrics-for-a-full-zot-image-with-extensions","text":"Add the metrics attribute under extensions in the configuration file to enable and configure metrics, as shown in the following example. \"extensions\" : { \"metrics\" : { \"enable\" : true , \"prometheus\" : { \"path\" : \"/metrics\" } } } The following table lists the configurable attributes for metrics collection. Attribute Description enable If this attribute is missing, metrics collection is enabled by default. Metrics collection can be disabled by setting this attribute to false . prometheus Attributes under prometheus contain configuration settings for the Prometheus node exporter. path The server path on which metrics will be exposed.","title":"Enabling metrics for a full zot image with extensions"},{"location":"admin-guide/admin-monitoring/#collecting-metrics-from-a-minimal-zot-image-using-a-node-exporter","text":"Although a minimal zot image does not contain a node exporter, it exposes internal metrics in a Prometheus format for collection by a separate node exporter tool such as zxp. The zot companion binary zxp is a node exporter that can be deployed with a minimal zot image in order to scrape metrics from the zot server. Metrics are automatically enabled in the zot server upon first scrape from the node exporter and the metrics are automatically disabled when the node exporter has not performed any scraping for some period. No extra zot configuration is needed for this behavior. You can download the zxp executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page. The binary image is named using the target platform and architecture. For example, the binary for an Intel-based MacOS server is zxp-darwin-amd64 . To configure the zxp example image, run this command: zxp-darwin-amd64 config zxp-config-file Tip: For convenience, you can rename the binary image file to simply zxp. Tip: A sample Dockerfile for zxp is available at Dockerfile-zxp . The configuration file of zxp contains connection details for the zot server from which it will scrape metrics. The following JSON structure is an example of the zxp-config-file contents: { \"Server\" : { \"protocol\" : \"http\" , \"host\" : \"127.0.0.1\" , \"port\" : \"8080\" }, \"Exporter\" : { \"port\" : \"8081\" , \"log\" : { \"level\" : \"debug\" } } } Tip: The zxp module does not have Prometheus integration. The zxp module is not needed with a full zot image.","title":"Collecting metrics from a minimal zot image using a node exporter"},{"location":"admin-guide/admin-monitoring/#benchmarking-zot-with-zb","text":"The zot project includes the zb tool, which allows you to benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification published by the Open Container Initiative (OCI). The zb tool is useful for benchmarking zot registry workloads in scenarios such as the following: comparing configuration changes comparing software versions comparing hardware/deployment environments comparing with other registries For detailed information about benchmarking with zb , see Benchmarking zot with zb .","title":"Benchmarking zot with zb"},{"location":"articles/authn-authz/","text":"User Authentication and Authorization with zot \u00b6 A robust set of authentication/authorization options are supported: Authentication TLS, including mTLS Username/password or token-based user authentication LDAP htpasswd Authorization Powerful identity-based access controls for repositories or specific repository paths The zot configuration model supports both authentication and authorization. Authentication credentials allow access to zot HTTP APIs. Authorization policies provide fine-grained control of the actions each authenticated user can perform in the registry. Authentication \u00b6 TLS authentication \u00b6 Because authentication credentials are passed over HTTP, it is imperative that TLS be enabled. You can enable and configure TLS authentication in the zot configuration file, as shown in the following example. \"http\" : { ... \"tls\" : { \"cert\" : \"/etc/zot/certs/server.cert\" , \"key\" : \"/etc/zot/certs/server.key\" } See Mutual TLS authentication for additional information about TLS. HTTP basic authentication \u00b6 When basic HTTP authentication is used, the username and password credentials are joined by a colon ( : ), base64 encoded, and passed in the HTTP Authorization header. HTTP bearer authentication \u00b6 To avoid passing the username and password credentials for every HTTP request, a zot client can use bearer token-based authentication . In this method, the client first authenticates with a token server and receives a short-lived token. The client then passes this token in the HTTP Authorization header, specifying Bearer as the authentication scheme. Configure bearer authentication in the zot configuration file as shown in this example. \"http\": { ... \"auth\": { \"bearer\": { \"realm\": \"https://auth.myreg.io/auth/token\", \"service\": \"myauth\", \"cert\": \"/etc/zot/auth.crt\" } } The following table lists the configurable attributes. Attribute Description realm A string typically related to the authentication scheme ( BASIC and BEARER ). service The name of the authentication service. cert The path and filename of the server\u2019s SSL/TLS certificate. Mutual TLS authentication \u00b6 zot supports basic TLS and password-less mutual TLS authentication (mTLS). Specifying a cacert file in the TLS section of the zot configuration file enables mTLS. The cacert parameter is used to validate the client-side TLS certificates. \"http\": { ... \"tls\": { \"cert\": \"/etc/zot/certs/server.cert\", \"key\": \"/etc/zot/certs/server.key\", \"cacert\": \"/etc/zot/certs/ca.cert\" } The following table lists the configurable attributes. Attribute Description cert The path and filename of the server\u2019s SSL/TLS certificate. key The path and filename of the server\u2019s registry key. cacert The path and filename of the server\u2019s cacerts file, which contains trusted certificate authority (CA) certificates. Preventing automated attacks with failure delay \u00b6 To help prevent automated attacks, you can add a delayed response to an authentication failure. Configure the failDelay attribute in the configuration file as shown in the following example. \"http\" : { \"auth\" : { \"failDelay\" : 5 } } The failDelay attribute specifies a waiting time, in seconds, before zot sends a failure notification to an authenticating user who has been denied access. Server-side authentication \u00b6 You can implement server-side authentication for zot using htpasswd or LDAP or both. Note: When both htpasswd and LDAP configuration are specified, LDAP authentication is given preference. Because htpasswd authentication is strictly local and requires no remote service, htpasswd serves as a fail-safe authentication mechanism should LDAP become unavailable. LDAP \u00b6 zot supports integration with an LDAP-based authentication service such as Microsoft Windows Active Directory (AD). Enable and configure LDAP authentication in the zot configuration file, as shown in the following example. \"http\" : { ... \"auth\" : { \"ldap\" : { \"address\" : \"ldap.example.org\" , \"port\" : 389 , \"startTLS\" : false , \"baseDN\" : \"ou=Users,dc=example,dc=org\" , \"userAttribute\" : \"uid\" , \"bindDN\" : \"cn=ldap-searcher,ou=Users,dc=example,dc=org\" , \"bindPassword\" : \"ldap-searcher-password\" , \"skipVerify\" : false , \"subtreeSearch\" : true } } } The following table lists the configurable attributes for LDAP authentication. Attribute Description address The IP address or hostname of the LDAP server. port The port number used by the LDAP service. startTLS Set to true to enable TLS communication with the LDAP server. baseDN Starting location within the LDAP directory for performing user searches. userAttribute Attribute name used for a user. bindDN Base Distinguished Name for the LDAP search. bindPassword Password of the bind LDAP user. skipVerify Skip TLS verification. subtreeSearch Set to true to expand the scope for search to include subtrees of the base DN. htpasswd \u00b6 Enable and configure htpasswd authentication in the zot configuration file, as shown in the following example. Create and store an htpasswd file on the server. $ htpasswd -bBn <username> <password> >> /etc/zot/htpasswd Enable htpasswd authentication and configure the path to the htpasswd authentication in the zot configuration file. \"http\" : { ... \"auth\" : { \"htpasswd\" : { \"path\" : \"/etc/zot/htpasswd\" }, The path attribute specifies the path and filename of the htpasswd file, which contains user names and hashed passwords. Authorization \u00b6 With an access scheme that relies solely on authentication, any authenticated user would be given complete access to the registry. To better control access, zot supports identity-based repository-level access control (authorization) policies. Access control policies \u00b6 Four types of access control policies are supported: Policy type Access allowed Anonymous An anonymous policy specifies what an unauthenticated user is allowed to do. This is an appropriate policy when you want to grant open read-only access to one or more repositories. User-specific A user-specific policy specifies access and actions for explicitly named users. Default The default policy specifies what actions are allowed if a user is authenticated but does match any user-specific policy. Admin The admin policy is a global access control policy that grants privileges to perform actions on any repository. Configuring access control \u00b6 User identity can be used as an authorization criterion for allowing actions on one or more repository paths. For specific users, you can choose to allow any combination of read, create, update, or delete actions on specific paths. When you define policies for specific repository paths, the paths can be specified explicitly or by using glob patterns with simple or recursive wildcards. When a repository path matches more than one path description, authorization is granted based on the policy of the longest (most specific) path matched. For example, if policies are defined for path descriptions ** and repos2/repo, the repos2/repo path will match both ** and repos2/repo descriptions. In this case, the repos2/repo policy will be applied because it is longer. Note that ** effectively defines the default policy, as it matches any path not matched by any other per-repository policy. To override all other policies, you can specify a global admin policy. Note: Always include the read action in any policy that you define. The create, update, and delete actions cannot be used without the read action. Example: Access control configuration \u00b6 Use the accessControl attribute in the configuration file to define a set of identity-based authorization policies, as shown in the following example. \"http\" : { ... \"accessControl\" : { \"**\" : { \"policies\" : [{ \"users\" : [ \"charlie\" ], \"actions\" : [ \"read\" , \"create\" , \"update\" ] }], \"defaultPolicy\" : [ \"read\" , \"create\" ] }, \"tmp/**\" : { \"defaultPolicy\" : [ \"read\" , \"create\" , \"update\" ] }, \"infra/*\" : { \"policies\" : [{ \"users\" : [ \"alice\" , \"bob\" ], \"actions\" : [ \"create\" , \"read\" , \"update\" , \"delete\" ] }, { \"users\" : [ \"mallory\" ], \"actions\" : [ \"create\" , \"read\" ] } ], \"defaultPolicy\" : [ \"read\" ] }, \"repos2/repo\" : { \"policies\" : [{ \"users\" : [ \"bob\" ], \"actions\" : [ \"read\" , \"create\" ] }, { \"users\" : [ \"mallory\" ], \"actions\" : [ \"create\" , \"read\" ] } ], \"defaultPolicy\" : [ \"read\" ] }, \"adminPolicy\" : { \"users\" : [ \"admin\" ], \"actions\" : [ \"read\" , \"create\" , \"update\" , \"delete\" ] } } In this example, five policies are defined: The default policy ( ** ) gives all users the ability to read or create content, while giving user \"charlie\" the additional ability to update content. The policy for tmp/** matches all repositories under tmp recursively and allows all users to read, create, or update content in those repositories. The policy for infra/* matches all repositories directly under infra. Separate policies are defined for specific users, along with a default read-only policy for all other users. The policy for repos2/repo matches only that specific repository. An admin policy ( adminPolicy ) gives the user \"admin\" global authorization to read, create, update, or delete content in any repository, overriding all other policies.","title":"Authentication and Authorization"},{"location":"articles/authn-authz/#user-authentication-and-authorization-with-zot","text":"A robust set of authentication/authorization options are supported: Authentication TLS, including mTLS Username/password or token-based user authentication LDAP htpasswd Authorization Powerful identity-based access controls for repositories or specific repository paths The zot configuration model supports both authentication and authorization. Authentication credentials allow access to zot HTTP APIs. Authorization policies provide fine-grained control of the actions each authenticated user can perform in the registry.","title":"User Authentication and Authorization with zot"},{"location":"articles/authn-authz/#authentication","text":"","title":"Authentication"},{"location":"articles/authn-authz/#tls-authentication","text":"Because authentication credentials are passed over HTTP, it is imperative that TLS be enabled. You can enable and configure TLS authentication in the zot configuration file, as shown in the following example. \"http\" : { ... \"tls\" : { \"cert\" : \"/etc/zot/certs/server.cert\" , \"key\" : \"/etc/zot/certs/server.key\" } See Mutual TLS authentication for additional information about TLS.","title":"TLS authentication"},{"location":"articles/authn-authz/#http-basic-authentication","text":"When basic HTTP authentication is used, the username and password credentials are joined by a colon ( : ), base64 encoded, and passed in the HTTP Authorization header.","title":"HTTP basic authentication"},{"location":"articles/authn-authz/#http-bearer-authentication","text":"To avoid passing the username and password credentials for every HTTP request, a zot client can use bearer token-based authentication . In this method, the client first authenticates with a token server and receives a short-lived token. The client then passes this token in the HTTP Authorization header, specifying Bearer as the authentication scheme. Configure bearer authentication in the zot configuration file as shown in this example. \"http\": { ... \"auth\": { \"bearer\": { \"realm\": \"https://auth.myreg.io/auth/token\", \"service\": \"myauth\", \"cert\": \"/etc/zot/auth.crt\" } } The following table lists the configurable attributes. Attribute Description realm A string typically related to the authentication scheme ( BASIC and BEARER ). service The name of the authentication service. cert The path and filename of the server\u2019s SSL/TLS certificate.","title":"HTTP bearer authentication"},{"location":"articles/authn-authz/#mutual-tls-authentication","text":"zot supports basic TLS and password-less mutual TLS authentication (mTLS). Specifying a cacert file in the TLS section of the zot configuration file enables mTLS. The cacert parameter is used to validate the client-side TLS certificates. \"http\": { ... \"tls\": { \"cert\": \"/etc/zot/certs/server.cert\", \"key\": \"/etc/zot/certs/server.key\", \"cacert\": \"/etc/zot/certs/ca.cert\" } The following table lists the configurable attributes. Attribute Description cert The path and filename of the server\u2019s SSL/TLS certificate. key The path and filename of the server\u2019s registry key. cacert The path and filename of the server\u2019s cacerts file, which contains trusted certificate authority (CA) certificates.","title":"Mutual TLS authentication"},{"location":"articles/authn-authz/#preventing-automated-attacks-with-failure-delay","text":"To help prevent automated attacks, you can add a delayed response to an authentication failure. Configure the failDelay attribute in the configuration file as shown in the following example. \"http\" : { \"auth\" : { \"failDelay\" : 5 } } The failDelay attribute specifies a waiting time, in seconds, before zot sends a failure notification to an authenticating user who has been denied access.","title":"Preventing automated attacks with failure delay"},{"location":"articles/authn-authz/#server-side-authentication","text":"You can implement server-side authentication for zot using htpasswd or LDAP or both. Note: When both htpasswd and LDAP configuration are specified, LDAP authentication is given preference. Because htpasswd authentication is strictly local and requires no remote service, htpasswd serves as a fail-safe authentication mechanism should LDAP become unavailable.","title":"Server-side authentication"},{"location":"articles/authn-authz/#ldap","text":"zot supports integration with an LDAP-based authentication service such as Microsoft Windows Active Directory (AD). Enable and configure LDAP authentication in the zot configuration file, as shown in the following example. \"http\" : { ... \"auth\" : { \"ldap\" : { \"address\" : \"ldap.example.org\" , \"port\" : 389 , \"startTLS\" : false , \"baseDN\" : \"ou=Users,dc=example,dc=org\" , \"userAttribute\" : \"uid\" , \"bindDN\" : \"cn=ldap-searcher,ou=Users,dc=example,dc=org\" , \"bindPassword\" : \"ldap-searcher-password\" , \"skipVerify\" : false , \"subtreeSearch\" : true } } } The following table lists the configurable attributes for LDAP authentication. Attribute Description address The IP address or hostname of the LDAP server. port The port number used by the LDAP service. startTLS Set to true to enable TLS communication with the LDAP server. baseDN Starting location within the LDAP directory for performing user searches. userAttribute Attribute name used for a user. bindDN Base Distinguished Name for the LDAP search. bindPassword Password of the bind LDAP user. skipVerify Skip TLS verification. subtreeSearch Set to true to expand the scope for search to include subtrees of the base DN.","title":"LDAP"},{"location":"articles/authn-authz/#htpasswd","text":"Enable and configure htpasswd authentication in the zot configuration file, as shown in the following example. Create and store an htpasswd file on the server. $ htpasswd -bBn <username> <password> >> /etc/zot/htpasswd Enable htpasswd authentication and configure the path to the htpasswd authentication in the zot configuration file. \"http\" : { ... \"auth\" : { \"htpasswd\" : { \"path\" : \"/etc/zot/htpasswd\" }, The path attribute specifies the path and filename of the htpasswd file, which contains user names and hashed passwords.","title":"htpasswd"},{"location":"articles/authn-authz/#authorization","text":"With an access scheme that relies solely on authentication, any authenticated user would be given complete access to the registry. To better control access, zot supports identity-based repository-level access control (authorization) policies.","title":"Authorization"},{"location":"articles/authn-authz/#access-control-policies","text":"Four types of access control policies are supported: Policy type Access allowed Anonymous An anonymous policy specifies what an unauthenticated user is allowed to do. This is an appropriate policy when you want to grant open read-only access to one or more repositories. User-specific A user-specific policy specifies access and actions for explicitly named users. Default The default policy specifies what actions are allowed if a user is authenticated but does match any user-specific policy. Admin The admin policy is a global access control policy that grants privileges to perform actions on any repository.","title":"Access control policies"},{"location":"articles/authn-authz/#configuring-access-control","text":"User identity can be used as an authorization criterion for allowing actions on one or more repository paths. For specific users, you can choose to allow any combination of read, create, update, or delete actions on specific paths. When you define policies for specific repository paths, the paths can be specified explicitly or by using glob patterns with simple or recursive wildcards. When a repository path matches more than one path description, authorization is granted based on the policy of the longest (most specific) path matched. For example, if policies are defined for path descriptions ** and repos2/repo, the repos2/repo path will match both ** and repos2/repo descriptions. In this case, the repos2/repo policy will be applied because it is longer. Note that ** effectively defines the default policy, as it matches any path not matched by any other per-repository policy. To override all other policies, you can specify a global admin policy. Note: Always include the read action in any policy that you define. The create, update, and delete actions cannot be used without the read action.","title":"Configuring access control"},{"location":"articles/authn-authz/#example-access-control-configuration","text":"Use the accessControl attribute in the configuration file to define a set of identity-based authorization policies, as shown in the following example. \"http\" : { ... \"accessControl\" : { \"**\" : { \"policies\" : [{ \"users\" : [ \"charlie\" ], \"actions\" : [ \"read\" , \"create\" , \"update\" ] }], \"defaultPolicy\" : [ \"read\" , \"create\" ] }, \"tmp/**\" : { \"defaultPolicy\" : [ \"read\" , \"create\" , \"update\" ] }, \"infra/*\" : { \"policies\" : [{ \"users\" : [ \"alice\" , \"bob\" ], \"actions\" : [ \"create\" , \"read\" , \"update\" , \"delete\" ] }, { \"users\" : [ \"mallory\" ], \"actions\" : [ \"create\" , \"read\" ] } ], \"defaultPolicy\" : [ \"read\" ] }, \"repos2/repo\" : { \"policies\" : [{ \"users\" : [ \"bob\" ], \"actions\" : [ \"read\" , \"create\" ] }, { \"users\" : [ \"mallory\" ], \"actions\" : [ \"create\" , \"read\" ] } ], \"defaultPolicy\" : [ \"read\" ] }, \"adminPolicy\" : { \"users\" : [ \"admin\" ], \"actions\" : [ \"read\" , \"create\" , \"update\" , \"delete\" ] } } In this example, five policies are defined: The default policy ( ** ) gives all users the ability to read or create content, while giving user \"charlie\" the additional ability to update content. The policy for tmp/** matches all repositories under tmp recursively and allows all users to read, create, or update content in those repositories. The policy for infra/* matches all repositories directly under infra. Separate policies are defined for specific users, along with a default read-only policy for all other users. The policy for repos2/repo matches only that specific repository. An admin policy ( adminPolicy ) gives the user \"admin\" global authorization to read, create, update, or delete content in any repository, overriding all other policies.","title":"Example: Access control configuration"},{"location":"articles/benchmarking-with-zb/","text":"Benchmarking zot with zb \u00b6 The zb tool is useful for benchmarking OCI registry workloads in scenarios such as the following: comparing configuration changes comparing software versions comparing hardware/deployment environments comparing with other registries With the zb tool, you can benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification published by the Open Container Initiative (OCI). Tip: We recommend installing and benchmarking with zb when you install zot . How to get zb \u00b6 The zb project is hosted with zot on GitHub at project-zot . From GitHub, you can download the zb binary or you can build zb from the source. You can also directly run the released docker image. Supported platforms and architectures \u00b6 zb is supported for the following operating systems and platform architectures: OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS Downloading zb binaries \u00b6 Download the executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page. The binary image is named using the target platform and architecture from the Supported platforms and architectures table. For example, the binary for an Intel-based MacOS server is zb-darwin-amd64 . Building zb from source \u00b6 To build the zb binary, copy or clone the zot project from GitHub and execute the make bench command in the zot directory. Use the same command options that you used to build zot , as shown: make OS=os ARCH=architecture bench For example, the following command builds zb for an Intel-based MacOS server: make OS=darwin ARCH=amd64 bench In this example, the resulting executable file is zb-darwin-amd64 in the zot/bin directory. Tip: A sample Dockerfile for zb is available at Dockerfile-zb . Running zb \u00b6 Tip: The instructions and examples in this guide use zb as the name of the executable file. The original filename of the executable file will reflect the build options, such as zb-linux-amd64. For convenience, you can rename the executable to simply zb. Usage \u00b6 To view the usage and options of zb , run the command with the --help option: bin/zb --help Command output: Usage: zb <url> [flags] Flags: -A, --auth-creds string Use colon-separated BASIC auth creds -c, --concurrency int Number of multiple requests to make at a time (default 1) -h, --help help for zb -o, --output-format string Output format of test results: stdout (default), json, ci-cd -r, --repo string Use specified repo on remote registry for test data -n, --requests int Number of requests to perform (default 1) -s, --src-cidr string Use specified cidr to obtain ips to make requests from, src-ips and src-cidr are mutually exclusive -i, --src-ips string Use colon-separated ips to make requests from, src-ips and src-cidr are mutually exclusive -v, --version Show the version and exit -d, --working-dir string Use specified directory to store test data Example \u00b6 The following example executes a benchmark operation using zb. bin/zb -c 10 -s 127.0.10.0/24 -n 1000 http://localhost:8080 You can also run the released docker image. docker run --net=host -it ghcr.io/project-zot/zb-linux-amd64:latest -c 10 -n 1000 -s 127.0.10.0/24 http://localhost:8080 Command output: Registry URL: http://localhost:8080 Concurrency Level: 2 Total requests: 100 Working dir: ======== Test name: Get Catalog Time taken for tests: 45.397205ms Complete requests: 100 Failed requests: 0 Requests per second: 2202.7788 2xx responses: 100 min: 402.259\u00b5s max: 3.295887ms p50: 855.045\u00b5s p75: 971.709\u00b5s p90: 1.127389ms p99: 3.295887ms ======== Test name: Push Monolith 1MB Time taken for tests: 952.336383ms Complete requests: 100 Failed requests: 0 Requests per second: 105.00491 2xx responses: 100 min: 11.125673ms max: 26.375356ms p50: 18.917253ms p75: 21.753441ms p90: 24.02137ms p99: 26.375356ms ...","title":"Benchmarking with zb"},{"location":"articles/benchmarking-with-zb/#benchmarking-zot-with-zb","text":"The zb tool is useful for benchmarking OCI registry workloads in scenarios such as the following: comparing configuration changes comparing software versions comparing hardware/deployment environments comparing with other registries With the zb tool, you can benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification published by the Open Container Initiative (OCI). Tip: We recommend installing and benchmarking with zb when you install zot .","title":"Benchmarking zot with zb"},{"location":"articles/benchmarking-with-zb/#how-to-get-zb","text":"The zb project is hosted with zot on GitHub at project-zot . From GitHub, you can download the zb binary or you can build zb from the source. You can also directly run the released docker image.","title":"How to get zb"},{"location":"articles/benchmarking-with-zb/#supported-platforms-and-architectures","text":"zb is supported for the following operating systems and platform architectures: OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS","title":"Supported platforms and architectures"},{"location":"articles/benchmarking-with-zb/#downloading-zb-binaries","text":"Download the executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page. The binary image is named using the target platform and architecture from the Supported platforms and architectures table. For example, the binary for an Intel-based MacOS server is zb-darwin-amd64 .","title":"Downloading zb binaries"},{"location":"articles/benchmarking-with-zb/#building-zb-from-source","text":"To build the zb binary, copy or clone the zot project from GitHub and execute the make bench command in the zot directory. Use the same command options that you used to build zot , as shown: make OS=os ARCH=architecture bench For example, the following command builds zb for an Intel-based MacOS server: make OS=darwin ARCH=amd64 bench In this example, the resulting executable file is zb-darwin-amd64 in the zot/bin directory. Tip: A sample Dockerfile for zb is available at Dockerfile-zb .","title":"Building zb from source"},{"location":"articles/benchmarking-with-zb/#running-zb","text":"Tip: The instructions and examples in this guide use zb as the name of the executable file. The original filename of the executable file will reflect the build options, such as zb-linux-amd64. For convenience, you can rename the executable to simply zb.","title":"Running zb"},{"location":"articles/benchmarking-with-zb/#usage","text":"To view the usage and options of zb , run the command with the --help option: bin/zb --help Command output: Usage: zb <url> [flags] Flags: -A, --auth-creds string Use colon-separated BASIC auth creds -c, --concurrency int Number of multiple requests to make at a time (default 1) -h, --help help for zb -o, --output-format string Output format of test results: stdout (default), json, ci-cd -r, --repo string Use specified repo on remote registry for test data -n, --requests int Number of requests to perform (default 1) -s, --src-cidr string Use specified cidr to obtain ips to make requests from, src-ips and src-cidr are mutually exclusive -i, --src-ips string Use colon-separated ips to make requests from, src-ips and src-cidr are mutually exclusive -v, --version Show the version and exit -d, --working-dir string Use specified directory to store test data","title":"Usage"},{"location":"articles/benchmarking-with-zb/#example","text":"The following example executes a benchmark operation using zb. bin/zb -c 10 -s 127.0.10.0/24 -n 1000 http://localhost:8080 You can also run the released docker image. docker run --net=host -it ghcr.io/project-zot/zb-linux-amd64:latest -c 10 -n 1000 -s 127.0.10.0/24 http://localhost:8080 Command output: Registry URL: http://localhost:8080 Concurrency Level: 2 Total requests: 100 Working dir: ======== Test name: Get Catalog Time taken for tests: 45.397205ms Complete requests: 100 Failed requests: 0 Requests per second: 2202.7788 2xx responses: 100 min: 402.259\u00b5s max: 3.295887ms p50: 855.045\u00b5s p75: 971.709\u00b5s p90: 1.127389ms p99: 3.295887ms ======== Test name: Push Monolith 1MB Time taken for tests: 952.336383ms Complete requests: 100 Failed requests: 0 Requests per second: 105.00491 2xx responses: 100 min: 11.125673ms max: 26.375356ms p50: 18.917253ms p75: 21.753441ms p90: 24.02137ms p99: 26.375356ms ...","title":"Example"},{"location":"articles/building-ci-cd-pipeline/","text":"Building an OCI-native Container Image CI/CD Pipeline \u00b6 An OCI-native secure container image build/delivery pipeline using the following tools: stacker for building OCI images zot as a vendor-neutral OCI image registry server skopeo for performing repository interactions cosign for container signing and verification cri-o for deploying container images cosigned for validating container images before deployment The Open Container Initiative (OCI) is an open governance structure for the express purpose of creating open industry standards around container formats and runtimes. This document describes a step-by-step procedure towards achieving an OCI-native secure software supply chain using zot in collaboration with other opensource tools. The following diagram shows a portion of the CI/CD pipeline. Build images \u00b6 stacker is a standalone tool for building OCI images via a declarative yaml format. The output of the build process is a container image in an OCI layout. example: stacker build command stacker build -f <stackerfile.yaml> Image registry \u00b6 zot is a production-ready vendor-neutral OCI image registry server purely based on the OCI Distribution Specification . If stacker is used to build the OCI image, it can also be used to publish the built image to an OCI registry. example: stacker publish command stacker publish --url <url> --username <user> --password <password> Alternatively, you can use skopeo , a command line utility that performs various operations on container images and image repositories. example: skopeo copies an image to a registry skopeo copy --format=oci oci:<oci-dir>/image:tag \\ docker://<zot-server>/image:tag Signing images \u00b6 cosign is a tool that performs container signing, verification, and storage in an OCI registry. example: cosign generates keys and signs an image in the registry cosign generate-key-pair cosign sign --key cosign.key <zot-server>/image:tag Click here to view an example. Deploying container images \u00b6 cri-o is an implementation of the Kubernetes Container Runtime Interface (CRI) to enable using OCI compatible runtimes. It is a lightweight alternative to using Docker as the runtime for Kubernetes. example: kubelet configuration file apiVersion: v1 kind: Pod metadata: name: example-pod spec: containers: - name: example-container image: <zot-server>/image:tag Container image verification \u00b6 cosigned is an image admission controller that validates container images before deploying them. example: install cosigned using Helm kubectl create namespace cosign-system kubectl create secret generic mysecret -n \\ cosign-system --from-file=cosign.pub=./cosign.pub helm repo add sigstore https://sigstore.github.io/helm-charts helm repo update helm install cosigned -n cosign-system sigstore/cosigned \\ --devel --set cosign.secretKeyRef.name=mysecret","title":"CI/CD Pipeline"},{"location":"articles/building-ci-cd-pipeline/#building-an-oci-native-container-image-cicd-pipeline","text":"An OCI-native secure container image build/delivery pipeline using the following tools: stacker for building OCI images zot as a vendor-neutral OCI image registry server skopeo for performing repository interactions cosign for container signing and verification cri-o for deploying container images cosigned for validating container images before deployment The Open Container Initiative (OCI) is an open governance structure for the express purpose of creating open industry standards around container formats and runtimes. This document describes a step-by-step procedure towards achieving an OCI-native secure software supply chain using zot in collaboration with other opensource tools. The following diagram shows a portion of the CI/CD pipeline.","title":"Building an OCI-native Container Image CI/CD Pipeline"},{"location":"articles/building-ci-cd-pipeline/#build-images","text":"stacker is a standalone tool for building OCI images via a declarative yaml format. The output of the build process is a container image in an OCI layout. example: stacker build command stacker build -f <stackerfile.yaml>","title":"Build images"},{"location":"articles/building-ci-cd-pipeline/#image-registry","text":"zot is a production-ready vendor-neutral OCI image registry server purely based on the OCI Distribution Specification . If stacker is used to build the OCI image, it can also be used to publish the built image to an OCI registry. example: stacker publish command stacker publish --url <url> --username <user> --password <password> Alternatively, you can use skopeo , a command line utility that performs various operations on container images and image repositories. example: skopeo copies an image to a registry skopeo copy --format=oci oci:<oci-dir>/image:tag \\ docker://<zot-server>/image:tag","title":"Image registry"},{"location":"articles/building-ci-cd-pipeline/#signing-images","text":"cosign is a tool that performs container signing, verification, and storage in an OCI registry. example: cosign generates keys and signs an image in the registry cosign generate-key-pair cosign sign --key cosign.key <zot-server>/image:tag Click here to view an example.","title":"Signing images"},{"location":"articles/building-ci-cd-pipeline/#deploying-container-images","text":"cri-o is an implementation of the Kubernetes Container Runtime Interface (CRI) to enable using OCI compatible runtimes. It is a lightweight alternative to using Docker as the runtime for Kubernetes. example: kubelet configuration file apiVersion: v1 kind: Pod metadata: name: example-pod spec: containers: - name: example-container image: <zot-server>/image:tag","title":"Deploying container images"},{"location":"articles/building-ci-cd-pipeline/#container-image-verification","text":"cosigned is an image admission controller that validates container images before deploying them. example: install cosigned using Helm kubectl create namespace cosign-system kubectl create secret generic mysecret -n \\ cosign-system --from-file=cosign.pub=./cosign.pub helm repo add sigstore https://sigstore.github.io/helm-charts helm repo update helm install cosigned -n cosign-system sigstore/cosigned \\ --devel --set cosign.secretKeyRef.name=mysecret","title":"Container image verification"},{"location":"articles/clustering/","text":"zot Clustering \u00b6 High availability of the zot registry is supported by the following features: Stateless zot instances to simplify scale out Bare-metal and Kubernetes deployments To ensure high-availability of the registry, zot supports a clustering scheme with stateless zot instances/replicas fronted by a loadbalancer and a shared remote backend storage. This scheme allows the registry service to remain available even if a few replicas fail or become unavailable. Loadbalancing across many zot replicas can also increase aggregate network throughput. Clustering is supported in both bare-metal and Kubernetes environments. Note: The remote backend storage must be S3 API-compatible . Bare-metal deployment \u00b6 Prerequisites \u00b6 A highly-available loadbalancer such as HAProxy configured to direct traffic to zot replicas. Multiple zot replicas as systemd services hosted on mutiple hosts or VMs. AWS S3 API-compatible remote backend storage. Kubernetes deployment \u00b6 Prerequisites \u00b6 A zot Kubernetes Deployment with required number of replicas. AWS S3 API-compatible remote backend storage. A zot Kubernetes Service . A zot Kubernetes Ingress Gateway if the service needs to be exposed outside. Implementing stateless zot \u00b6 zot maintains two types of durable state: the actual image data itself the image metadata in the registry\u2019s cache In a stateless clustering scheme, the image data is stored in the remote storage backend and the registry cache is disabled by turning off both deduplication and garbage collection. Ecosystem tools \u00b6 The OCI Distribution Specification imposes certain rules about the HTTP URI paths to which various ecosystem tools must conform. Consider these rules when setting the HTTP prefixes during loadbalancing and ingress gateway configuration. Examples \u00b6 zot supports clustering by using multiple stateless zot replicas with shared S3 storage and an HAProxy (with sticky session) load-balancing traffic to the replicas. YAML configuration \u00b6 Click here to view a sample haproxy configuration. global log /dev/log local0 log /dev/log local1 notice chroot /var/lib/haproxy maxconn 2000 stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners stats timeout 30s user haproxy group haproxy daemon # Default SSL material locations ca-base /etc/ssl/certs crt-base /etc/ssl/private # See : https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256 ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets defaults log global mode http option httplog option dontlognull timeout connect 5000 timeout client 50000 timeout server 50000 errorfile 400 /etc/haproxy/errors/400.http errorfile 403 /etc/haproxy/errors/403.http errorfile 408 /etc/haproxy/errors/408.http errorfile 500 /etc/haproxy/errors/500.http errorfile 502 /etc/haproxy/errors/502.http errorfile 503 /etc/haproxy/errors/503.http errorfile 504 /etc/haproxy/errors/504.http frontend zot bind *:8080 mode http default_backend zot-cluster backend zot-cluster mode http balance roundrobin server zot1 127.0.0.1:8081 check server zot2 127.0.0.1:8082 check server zot3 127.0.0.1:8083 check zot S3 configuration \u00b6 Click here to view a sample zot configuration for S3. { \"distSpecVersion\" : \"1.0.1-dev\" , \"storage\" : { \"rootDirectory\" : \"/tmp/zot\" , \"dedupe\" : true , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false }, \"cacheDriver\" : { \"name\" : \"dynamodb\" , \"endpoint\" : \"http://localhost:4566\" , \"region\" : \"us-east-2\" , \"tableName\" : \"MainTable\" } }, \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" }, \"log\" : { \"level\" : \"debug\" } }","title":"Clustering"},{"location":"articles/clustering/#zot-clustering","text":"High availability of the zot registry is supported by the following features: Stateless zot instances to simplify scale out Bare-metal and Kubernetes deployments To ensure high-availability of the registry, zot supports a clustering scheme with stateless zot instances/replicas fronted by a loadbalancer and a shared remote backend storage. This scheme allows the registry service to remain available even if a few replicas fail or become unavailable. Loadbalancing across many zot replicas can also increase aggregate network throughput. Clustering is supported in both bare-metal and Kubernetes environments. Note: The remote backend storage must be S3 API-compatible .","title":"zot Clustering"},{"location":"articles/clustering/#bare-metal-deployment","text":"","title":"Bare-metal deployment"},{"location":"articles/clustering/#prerequisites","text":"A highly-available loadbalancer such as HAProxy configured to direct traffic to zot replicas. Multiple zot replicas as systemd services hosted on mutiple hosts or VMs. AWS S3 API-compatible remote backend storage.","title":"Prerequisites"},{"location":"articles/clustering/#kubernetes-deployment","text":"","title":"Kubernetes deployment"},{"location":"articles/clustering/#prerequisites_1","text":"A zot Kubernetes Deployment with required number of replicas. AWS S3 API-compatible remote backend storage. A zot Kubernetes Service . A zot Kubernetes Ingress Gateway if the service needs to be exposed outside.","title":"Prerequisites"},{"location":"articles/clustering/#implementing-stateless-zot","text":"zot maintains two types of durable state: the actual image data itself the image metadata in the registry\u2019s cache In a stateless clustering scheme, the image data is stored in the remote storage backend and the registry cache is disabled by turning off both deduplication and garbage collection.","title":"Implementing stateless zot"},{"location":"articles/clustering/#ecosystem-tools","text":"The OCI Distribution Specification imposes certain rules about the HTTP URI paths to which various ecosystem tools must conform. Consider these rules when setting the HTTP prefixes during loadbalancing and ingress gateway configuration.","title":"Ecosystem tools"},{"location":"articles/clustering/#examples","text":"zot supports clustering by using multiple stateless zot replicas with shared S3 storage and an HAProxy (with sticky session) load-balancing traffic to the replicas.","title":"Examples"},{"location":"articles/clustering/#yaml-configuration","text":"Click here to view a sample haproxy configuration. global log /dev/log local0 log /dev/log local1 notice chroot /var/lib/haproxy maxconn 2000 stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners stats timeout 30s user haproxy group haproxy daemon # Default SSL material locations ca-base /etc/ssl/certs crt-base /etc/ssl/private # See : https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256 ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets defaults log global mode http option httplog option dontlognull timeout connect 5000 timeout client 50000 timeout server 50000 errorfile 400 /etc/haproxy/errors/400.http errorfile 403 /etc/haproxy/errors/403.http errorfile 408 /etc/haproxy/errors/408.http errorfile 500 /etc/haproxy/errors/500.http errorfile 502 /etc/haproxy/errors/502.http errorfile 503 /etc/haproxy/errors/503.http errorfile 504 /etc/haproxy/errors/504.http frontend zot bind *:8080 mode http default_backend zot-cluster backend zot-cluster mode http balance roundrobin server zot1 127.0.0.1:8081 check server zot2 127.0.0.1:8082 check server zot3 127.0.0.1:8083 check","title":"YAML configuration"},{"location":"articles/clustering/#zot-s3-configuration","text":"Click here to view a sample zot configuration for S3. { \"distSpecVersion\" : \"1.0.1-dev\" , \"storage\" : { \"rootDirectory\" : \"/tmp/zot\" , \"dedupe\" : true , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false }, \"cacheDriver\" : { \"name\" : \"dynamodb\" , \"endpoint\" : \"http://localhost:4566\" , \"region\" : \"us-east-2\" , \"tableName\" : \"MainTable\" } }, \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" }, \"log\" : { \"level\" : \"debug\" } }","title":"zot S3 configuration"},{"location":"articles/security-posture/","text":"zot Security Posture \u00b6 An overview of zot build-time and runtime security hardening features, including: Build-time hardening such as PIE-mode builds Minimal-build option for smaller attack surface Open Source Security Foundation best practices for CI/CD Non-root deployment Robust authentication/authorization options The zot project takes a defense-in-depth approach to security, applying industry-standard best practices at various stages. Recognizing that security hardening and product features are sometimes in conflict with each other, we also provide flexibility both at build and deployment time. Build-time hardening \u00b6 The following are the steps taken during build-time. PIE build-mode \u00b6 The zot binary is built with PIE build-mode enabled to take advantage of ASLR support in modern operating systems such as Linux ASLR . While zot is intended to be a long-running service (without frequent restarts), it prevents attackers from developing a generic attack that depends on predictable memory addresses across multiple zot deployments. Conditional builds \u00b6 Functionality in zot is broadly organized as a core Distribution Specification implementation and additional features as extensions . The rationale behind this approach is to minimize or control library dependencies that get included in the binary and consequently the attack surface. We currently build and release two image flavors: minimal , which is a minimal Distribution Specification conformant registry, and full , which incorporates the minimal build and all extensions The minimal flavor is for the security-minded and minimizes the number of dependencies and libraries. The full flavor is for the functionality-minded with the caveat that the attack surface of the binary is potentially broader. However by no means are these the only options. Our build (via the Makefile ) provides the flexibility to pick and choose extensions in order to build a binary between minimal and full . For example, make EXTENSIONS=search binary produces a zot binary with only the search feature enabled. CI/CD pipeline \u00b6 zot CI/CD process attempts to align with the Open Source Security Foundation (OSSF) best practices guidelines to achieve high code quality. Code reviews \u00b6 zot is an open source project and all code submissions are open and transparent. Every pull request (PR) submitted to the project repository must be reviewed by the code owners. We have additional CI/CD workflows monitoring for unreviewed commits. CI/CD checks \u00b6 All PRs must pass the full CI/CD pipeline checks including unit, functional, and integration tests, code quality and style checks, and performance regressions. In addition, all binaries produced are subjected to further security scans to detect any known vulnerabilities. Runtime hardening \u00b6 The following steps can be taken to harden a zot deployment. Unprivileged runtime process \u00b6 Running zot doesn\u2019t require root privileges. In fact, the recommended approach is to create a separate user/group ID for the zot process. Authentication \u00b6 All interactions with zot are over HTTP APIs, and htpasswd -based local authentication, LDAP, mutual TLS, and token-based authentication mechanisms are supported. We strongly recommend enabling a suitable mechanism for your deployment use case in order to prevent unauthorized access. See the provided authentication examples . Access control \u00b6 Following authentication, it is further possible to allow or deny actions by a user on a particular repository stored on the zot registry. See the provided access control examples . Vulnerability scans \u00b6 Apart from hardening the deployment itself, zot also supports security scanning of stored container images. Reporting security issues \u00b6 We understand that no software is perfect and in spite of our best efforts, security bugs may be found. Refer to our security policy for taking a responsible course of action when reporting security bugs.","title":"Security Posture"},{"location":"articles/security-posture/#zot-security-posture","text":"An overview of zot build-time and runtime security hardening features, including: Build-time hardening such as PIE-mode builds Minimal-build option for smaller attack surface Open Source Security Foundation best practices for CI/CD Non-root deployment Robust authentication/authorization options The zot project takes a defense-in-depth approach to security, applying industry-standard best practices at various stages. Recognizing that security hardening and product features are sometimes in conflict with each other, we also provide flexibility both at build and deployment time.","title":"zot Security Posture"},{"location":"articles/security-posture/#build-time-hardening","text":"The following are the steps taken during build-time.","title":"Build-time hardening"},{"location":"articles/security-posture/#pie-build-mode","text":"The zot binary is built with PIE build-mode enabled to take advantage of ASLR support in modern operating systems such as Linux ASLR . While zot is intended to be a long-running service (without frequent restarts), it prevents attackers from developing a generic attack that depends on predictable memory addresses across multiple zot deployments.","title":"PIE build-mode"},{"location":"articles/security-posture/#conditional-builds","text":"Functionality in zot is broadly organized as a core Distribution Specification implementation and additional features as extensions . The rationale behind this approach is to minimize or control library dependencies that get included in the binary and consequently the attack surface. We currently build and release two image flavors: minimal , which is a minimal Distribution Specification conformant registry, and full , which incorporates the minimal build and all extensions The minimal flavor is for the security-minded and minimizes the number of dependencies and libraries. The full flavor is for the functionality-minded with the caveat that the attack surface of the binary is potentially broader. However by no means are these the only options. Our build (via the Makefile ) provides the flexibility to pick and choose extensions in order to build a binary between minimal and full . For example, make EXTENSIONS=search binary produces a zot binary with only the search feature enabled.","title":"Conditional builds"},{"location":"articles/security-posture/#cicd-pipeline","text":"zot CI/CD process attempts to align with the Open Source Security Foundation (OSSF) best practices guidelines to achieve high code quality.","title":"CI/CD pipeline"},{"location":"articles/security-posture/#code-reviews","text":"zot is an open source project and all code submissions are open and transparent. Every pull request (PR) submitted to the project repository must be reviewed by the code owners. We have additional CI/CD workflows monitoring for unreviewed commits.","title":"Code reviews"},{"location":"articles/security-posture/#cicd-checks","text":"All PRs must pass the full CI/CD pipeline checks including unit, functional, and integration tests, code quality and style checks, and performance regressions. In addition, all binaries produced are subjected to further security scans to detect any known vulnerabilities.","title":"CI/CD checks"},{"location":"articles/security-posture/#runtime-hardening","text":"The following steps can be taken to harden a zot deployment.","title":"Runtime hardening"},{"location":"articles/security-posture/#unprivileged-runtime-process","text":"Running zot doesn\u2019t require root privileges. In fact, the recommended approach is to create a separate user/group ID for the zot process.","title":"Unprivileged runtime process"},{"location":"articles/security-posture/#authentication","text":"All interactions with zot are over HTTP APIs, and htpasswd -based local authentication, LDAP, mutual TLS, and token-based authentication mechanisms are supported. We strongly recommend enabling a suitable mechanism for your deployment use case in order to prevent unauthorized access. See the provided authentication examples .","title":"Authentication"},{"location":"articles/security-posture/#access-control","text":"Following authentication, it is further possible to allow or deny actions by a user on a particular repository stored on the zot registry. See the provided access control examples .","title":"Access control"},{"location":"articles/security-posture/#vulnerability-scans","text":"Apart from hardening the deployment itself, zot also supports security scanning of stored container images.","title":"Vulnerability scans"},{"location":"articles/security-posture/#reporting-security-issues","text":"We understand that no software is perfect and in spite of our best efforts, security bugs may be found. Refer to our security policy for taking a responsible course of action when reporting security bugs.","title":"Reporting security issues"},{"location":"articles/storage/","text":"Storage Planning with zot \u00b6 zot supports the following features to provide OCI standards-based, vendor-agnostic image storage: Local and remote file storage Inline deduplication and garbage collection Data scrubbing in background Storage model \u00b6 Data handling in zot revolves around two main principles: that data and APIs on the wire conform to the OCI Distribution Specification and that data on the disk conforms to the OCI Image Layout Specification. As a result, any client that is compliant with the Distribution Specification can read from or write to a zot registry. Furthermore, the actual storage is simply an OCI Image Layout. With only these two specification documents in hand, the entire data flow inside can be easily understood. Note: zot does not implement, support, or require any vendor-specific protocols, including that of Docker. Hosting an OCI image layout \u00b6 Because zot supports the OCI image layout, it can readily host and serve any directories holding a valid OCI image layout even when those directories have been created elsewhere. This property of zot is suitable for use cases in which container images are independently built, stored, and transferred, but later need to be served over the network. Storage backends \u00b6 The following types of storage backends are supported. Local filesystem \u00b6 zot can store and serve files from one or more local directories (folders). A minimum of one root directory is required for local hosting, but additional hosted directories can be added. When accessed by HTTP APIs, all directories can appear as a single data store. Note: Remote filesystems that are mounted and accessible locally such as NFS or fuse are treated as local filesystems. Remote filesystem \u00b6 zot can also store data remotely in the cloud, using the storage APIs of the cloud service. Currently, zot supports only the AWS S3 storage service. Example: zot S3 configuration \u00b6 Click here to view a sample zot configuration for S3. { \"distSpecVersion\" : \"1.0.1-dev\" , \"storage\" : { \"rootDirectory\" : \"/tmp/zot\" , \"dedupe\" : true , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false }, \"cacheDriver\" : { \"name\" : \"dynamodb\" , \"endpoint\" : \"http://localhost:4566\" , \"region\" : \"us-east-2\" , \"tableName\" : \"MainTable\" }, \"subPaths\" : { \"/a\" : { \"rootDirectory\" : \"/tmp/zot1\" , \"dedupe\" : false , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot-a\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false } }, \"/b\" : { \"rootDirectory\" : \"/tmp/zot2\" , \"dedupe\" : true , \"remoteCache\" : false , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot-b\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false } }, \"/c\" : { \"rootDirectory\" : \"/tmp/zot3\" , \"dedupe\" : true , \"remoteCache\" : true , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot-c\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : false , \"skipverify\" : false }, \"cacheDriver\" : { \"name\" : \"dynamodb\" , \"endpoint\" : \"http://localhost:4566\" , \"region\" : \"us-east-2\" , \"tableName\" : \"cTable\" } } } }, \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" }, \"log\" : { \"level\" : \"debug\" } } Storage configuration \u00b6 Exposing flexibility in storage capabilities is a key tenet for catering to the requirements of varied environments ranging from cloud to on-premises to IoT. Commit \u00b6 Most modern filesystems buffer and flush RAM data to disk after a delay. The purpose of this function is to improve performance at the cost of higher disk memory usage. In embedded devices such as Raspberry Pi, for example, where RAM may be very limited and at a premium, it is desirable to flush data to disk more frequently. The zot storage configuration exposes an option called commit which, when enabled, causes data writes to be committed to disk immediately. This option is disabled by default. Deduplication \u00b6 Deduplication is a storage space saving feature wherein only a single copy of specific content is maintained on disk while many different image manifests may hold references to that same content. The deduplication feature is also available for supported cloud storage backends. Garbage collection \u00b6 After an image is deleted by deleting an image manifest, the corresponding blobs can be purged to free up space. However, since Distribution Specification APIs are not transactional between blob and manifest lifecycle, care must be taken so as not to put the storage in an inconsistent state. Garbage collection in zot is an inline feature meaning that it is not necessary to take the registry offline. The zot configuration model allows for enabling and disabling garbage collection. The model also allows the configuration of a tunable delay, which can be set depending on client network speeds and the size of blobs. Scrub \u00b6 The scrub function, available as an extension , makes it possible to ascertain data validity by computing hashes on blobs periodically and continuously so that any bit rot is caught and reported early.","title":"Storage Planning"},{"location":"articles/storage/#storage-planning-with-zot","text":"zot supports the following features to provide OCI standards-based, vendor-agnostic image storage: Local and remote file storage Inline deduplication and garbage collection Data scrubbing in background","title":"Storage Planning with zot"},{"location":"articles/storage/#storage-model","text":"Data handling in zot revolves around two main principles: that data and APIs on the wire conform to the OCI Distribution Specification and that data on the disk conforms to the OCI Image Layout Specification. As a result, any client that is compliant with the Distribution Specification can read from or write to a zot registry. Furthermore, the actual storage is simply an OCI Image Layout. With only these two specification documents in hand, the entire data flow inside can be easily understood. Note: zot does not implement, support, or require any vendor-specific protocols, including that of Docker.","title":"Storage model"},{"location":"articles/storage/#hosting-an-oci-image-layout","text":"Because zot supports the OCI image layout, it can readily host and serve any directories holding a valid OCI image layout even when those directories have been created elsewhere. This property of zot is suitable for use cases in which container images are independently built, stored, and transferred, but later need to be served over the network.","title":"Hosting an OCI image layout"},{"location":"articles/storage/#storage-backends","text":"The following types of storage backends are supported.","title":"Storage backends"},{"location":"articles/storage/#local-filesystem","text":"zot can store and serve files from one or more local directories (folders). A minimum of one root directory is required for local hosting, but additional hosted directories can be added. When accessed by HTTP APIs, all directories can appear as a single data store. Note: Remote filesystems that are mounted and accessible locally such as NFS or fuse are treated as local filesystems.","title":"Local filesystem"},{"location":"articles/storage/#remote-filesystem","text":"zot can also store data remotely in the cloud, using the storage APIs of the cloud service. Currently, zot supports only the AWS S3 storage service.","title":"Remote filesystem"},{"location":"articles/storage/#example-zot-s3-configuration","text":"Click here to view a sample zot configuration for S3. { \"distSpecVersion\" : \"1.0.1-dev\" , \"storage\" : { \"rootDirectory\" : \"/tmp/zot\" , \"dedupe\" : true , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false }, \"cacheDriver\" : { \"name\" : \"dynamodb\" , \"endpoint\" : \"http://localhost:4566\" , \"region\" : \"us-east-2\" , \"tableName\" : \"MainTable\" }, \"subPaths\" : { \"/a\" : { \"rootDirectory\" : \"/tmp/zot1\" , \"dedupe\" : false , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot-a\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false } }, \"/b\" : { \"rootDirectory\" : \"/tmp/zot2\" , \"dedupe\" : true , \"remoteCache\" : false , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot-b\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : true , \"skipverify\" : false } }, \"/c\" : { \"rootDirectory\" : \"/tmp/zot3\" , \"dedupe\" : true , \"remoteCache\" : true , \"storageDriver\" : { \"name\" : \"s3\" , \"rootdirectory\" : \"/zot-c\" , \"region\" : \"us-east-2\" , \"bucket\" : \"zot-storage\" , \"secure\" : false , \"skipverify\" : false }, \"cacheDriver\" : { \"name\" : \"dynamodb\" , \"endpoint\" : \"http://localhost:4566\" , \"region\" : \"us-east-2\" , \"tableName\" : \"cTable\" } } } }, \"http\" : { \"address\" : \"127.0.0.1\" , \"port\" : \"8080\" }, \"log\" : { \"level\" : \"debug\" } }","title":"Example: zot S3 configuration"},{"location":"articles/storage/#storage-configuration","text":"Exposing flexibility in storage capabilities is a key tenet for catering to the requirements of varied environments ranging from cloud to on-premises to IoT.","title":"Storage configuration"},{"location":"articles/storage/#commit","text":"Most modern filesystems buffer and flush RAM data to disk after a delay. The purpose of this function is to improve performance at the cost of higher disk memory usage. In embedded devices such as Raspberry Pi, for example, where RAM may be very limited and at a premium, it is desirable to flush data to disk more frequently. The zot storage configuration exposes an option called commit which, when enabled, causes data writes to be committed to disk immediately. This option is disabled by default.","title":"Commit"},{"location":"articles/storage/#deduplication","text":"Deduplication is a storage space saving feature wherein only a single copy of specific content is maintained on disk while many different image manifests may hold references to that same content. The deduplication feature is also available for supported cloud storage backends.","title":"Deduplication"},{"location":"articles/storage/#garbage-collection","text":"After an image is deleted by deleting an image manifest, the corresponding blobs can be purged to free up space. However, since Distribution Specification APIs are not transactional between blob and manifest lifecycle, care must be taken so as not to put the storage in an inconsistent state. Garbage collection in zot is an inline feature meaning that it is not necessary to take the registry offline. The zot configuration model allows for enabling and disabling garbage collection. The model also allows the configuration of a tunable delay, which can be set depending on client network speeds and the size of blobs.","title":"Garbage collection"},{"location":"articles/storage/#scrub","text":"The scrub function, available as an extension , makes it possible to ascertain data validity by computing hashes on blobs periodically and continuously so that any bit rot is caught and reported early.","title":"Scrub"},{"location":"developer-guide/extensions-dev/","text":"Developing New Extensions \u00b6 You can add new functionality to the zot registry by developing extensions for integration into zot . The OCI Distribution Specification supports extending the functionality of an OCI-compliant registry implementation by adding extensions . Extensions are new APIs developed outside of the core OCI specs. Developers may propose their extensions to the OCI for possible future addition to the Distribution Specification. Note: When planning the develoment of a new extension, be sure to familiarize yourself with the OCI documentation and guidelines for extensions . Current extensions \u00b6 The following extensions are currently available in the zot project: metrics sync search scrub You can examine the implementation of these extensions in the zot project extensions section . The operation and configuration of the current extensions is described in Configuring zot . Guidelines for developing new extensions \u00b6 Each file to be included in the binary for only a specific extension must contain the following syntax at the beginning of the file. For example, a file to be included in the build for extension foo must begin with the following lines: //go:build foo // +build foo package foo ... - The first line (`//go:build foo`) is added automatically by the linter if not already present. - The second line and the third (blank) line are mandatory. For each file that contains functions specific to the extension, create a corresponding \"no-op\" file that contains exactly the same function names. In this file: Each function is a \"no-op,\" performing no action other than to return a \"success\" value if expected. We recommend naming this \"no-op\" file by appending -disabled to the name of the original file. For example, if the extension is implemented by extension-foo.go , the corresponding \"no-op\" file could be named extension-foo-disabled.go . The first two lines declare an \"anti-tag\" (for example, !foo ). In the foo extension example, the \"no-op\" file will be included in binaries that don't implement the foo extension, but won't be included in binaries that implement the foo extension. The foo example \"no-op\" file begins with the following lines: //go:build !foo // +build !foo package foo ... See extension-lint-disabled.go in the zot project for an example of a \"no-op\" file. When developing a new extension, you should create a blackbox test in which a binary containing the new extension can be tested in a usage scenario. See the test/blackbox folder in the zot project for examples of extension tests. Create targets in Makefile for newly added blackbox tests. You should also add them as GitHub Workflows in .github/workflows/ecosystem-tools.yaml in the zot project. Modify the EXTENSIONS variable in Makefile by adding the new extension. The EXTENSIONS variable represents all extensions and is used in make targets that require all (for example, make test ). When configuring multiple extensions in the extensions section of the zot configuration file, list new extensions after the current extensions in the recommended order, such as: metrics, sync, search, scrub, , , ...","title":"Extensions"},{"location":"developer-guide/extensions-dev/#developing-new-extensions","text":"You can add new functionality to the zot registry by developing extensions for integration into zot . The OCI Distribution Specification supports extending the functionality of an OCI-compliant registry implementation by adding extensions . Extensions are new APIs developed outside of the core OCI specs. Developers may propose their extensions to the OCI for possible future addition to the Distribution Specification. Note: When planning the develoment of a new extension, be sure to familiarize yourself with the OCI documentation and guidelines for extensions .","title":"Developing New Extensions"},{"location":"developer-guide/extensions-dev/#current-extensions","text":"The following extensions are currently available in the zot project: metrics sync search scrub You can examine the implementation of these extensions in the zot project extensions section . The operation and configuration of the current extensions is described in Configuring zot .","title":"Current extensions"},{"location":"developer-guide/extensions-dev/#guidelines-for-developing-new-extensions","text":"Each file to be included in the binary for only a specific extension must contain the following syntax at the beginning of the file. For example, a file to be included in the build for extension foo must begin with the following lines: //go:build foo // +build foo package foo ... - The first line (`//go:build foo`) is added automatically by the linter if not already present. - The second line and the third (blank) line are mandatory. For each file that contains functions specific to the extension, create a corresponding \"no-op\" file that contains exactly the same function names. In this file: Each function is a \"no-op,\" performing no action other than to return a \"success\" value if expected. We recommend naming this \"no-op\" file by appending -disabled to the name of the original file. For example, if the extension is implemented by extension-foo.go , the corresponding \"no-op\" file could be named extension-foo-disabled.go . The first two lines declare an \"anti-tag\" (for example, !foo ). In the foo extension example, the \"no-op\" file will be included in binaries that don't implement the foo extension, but won't be included in binaries that implement the foo extension. The foo example \"no-op\" file begins with the following lines: //go:build !foo // +build !foo package foo ... See extension-lint-disabled.go in the zot project for an example of a \"no-op\" file. When developing a new extension, you should create a blackbox test in which a binary containing the new extension can be tested in a usage scenario. See the test/blackbox folder in the zot project for examples of extension tests. Create targets in Makefile for newly added blackbox tests. You should also add them as GitHub Workflows in .github/workflows/ecosystem-tools.yaml in the zot project. Modify the EXTENSIONS variable in Makefile by adding the new extension. The EXTENSIONS variable represents all extensions and is used in make targets that require all (for example, make test ). When configuring multiple extensions in the extensions section of the zot configuration file, list new extensions after the current extensions in the recommended order, such as: metrics, sync, search, scrub, , , ...","title":"Guidelines for developing new extensions"},{"location":"developer-guide/onboarding/","text":"Onboarding zot for Development \u00b6 Getting Started \u00b6 Supported Developer Platforms \u00b6 Development is officially supported on Linux and Apple MacOS platforms. However, development should be possible on any platform that supports the golang toolchain. OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS (Apple M1) Supported platforms and architectures Prerequisites \u00b6 Install golang (1.19+) \u00b6 The zot project requires golang 1.19 or newer. You can follow these instructions to install the golang toolchain. After installation, make sure that the path environment variable or your IDE can find the toolchain. Cloning zot \u00b6 The zot registry code base is hosted on GitHub at https://github.com/project-zot/zot . To clone the zot project, use this command: $ git clone https://github.com/project-zot/zot.git Building zot \u00b6 To build zot, execute the make command in the zot directory using the following general syntax: $ make OS=os ARCH=architecture {binary | binary-minimal} The operating system and architecture options are listed in the Supported platforms and architectures table. If an option is not specified, the defaults are linux and amd64 . The binary option builds the full zot binary image with all extensions. The binary-minimal option builds the minimal distribution-spec conformant zot binary image without extensions, reducing the attack surface. For example, to build a zot image with extensions for an Intel-based linux server, use the following command: make OS=linux ARCH=amd64 binary The make command builds an executable image in the zot/bin directory. The original filename of the zot executable image will indicate the build options. For example, the filename of an Intel-based linux minimal image is zot-linux-amd64-minimal . Running zot \u00b6 The behavior of zot is controlled via configuration only. To launch the zot server, execute the following command: $ bin/zot-linux-amd64 serve examples/config-example.json Debugging zot \u00b6 To produce a zot binary that includes extensive debugging information, build zot with the binary-debug option, as shown in this example: make OS=linux ARCH=amd64 binary-debug You can then attach and run a debugging tool such as Delve to the running zot process. Delve is a powerful open-source debugger for the Go programming language. Downloads and documentation for Delve are available on GitHub at https://github.com/go-delve/delve . Code Organization \u00b6 The zot project codebase is organized as follows: / - pkg/ # Source code for all libraries - api/ # Source code for HTTP APIs - config/ # Global configuration model - storage/ # Source code for storage backends - cli/ # Source code for command line interface (cli) - common/ # Source code for common utility routines - compliance/ # Source code for dist-spec conformance tests - log/ # Source code for logging framework - test/ # Internal test scripts/data - extensions/ # Source code for all extensions - config/ - sync/ - monitoring/ - sync/ - exporter/ # Source code for metrics exporter - cmd/ # Source code for binary main()s - zot/ # Source code for zot binary - zli/ # Source code for zot cli - zb/ # Source code for zb, the dist-spec benchmarking tool - errors/ # Source code for error codes - examples/ # Configuration examples - swagger/ # Swagger integration - docs/ # Documentation Contributor Guidelines \u00b6 License \u00b6 zot is released under the Apache License 2.0 . All contributions must adhere to this license. Developer Certificate of Origin (DCO) \u00b6 All commits require a Developer Certificate of Origin via the \"Signed-off-by:\" commit message and commit signatures using GPG keys. Submitting a Pull Request (PR) \u00b6 First, fork the zot project on GitHub and submit a commit to your fork. Then open a new pull request (PR) to the zot project. PR Requirements \u00b6 Any new PR requires a form to be filled out with details about the PR. Appropriate code owners are automatically identified, and they will be notified of the new PR. CI/CD Checks \u00b6 We take code quality very very seriously. All PRs must pass various CI/CD checks which cover enforce code quality such as code coverage, security scanning, performance regressions, distribution spec conformance, ecosystem client tool compatibility, etc. Reporting Issues \u00b6 Issues are broadly classified as functional bugs and security issues. The latter is treated a little differently due to the sensitive nature. Filing an Issue \u00b6 No software is perfect, and we expect users to find issues with the zot code base. First, check whether your issue has already been filed by someone else by doing an issue search . If the issue not found, file a new issue by clicking the New issue button on the zot/issues page and answering the questions. The more information that you can provide, the easier it becomes to triage the issue. Security Issues \u00b6 Security issues are best filed by sending an email to security@zotregistry.io. After 45 days, we will make the issue public and give credit to the original filer of the issue. Code of Conduct \u00b6 The zot project follows the CNCF Code of Conduct . Reporting \u00b6 For incidents occurring on the zot project, contact the zot project conduct committee by sending an email to conduct@zotregistry.io. You can expect a response within three business days.","title":"Onboarding"},{"location":"developer-guide/onboarding/#onboarding-zot-for-development","text":"","title":"Onboarding zot for Development"},{"location":"developer-guide/onboarding/#getting-started","text":"","title":"Getting Started"},{"location":"developer-guide/onboarding/#supported-developer-platforms","text":"Development is officially supported on Linux and Apple MacOS platforms. However, development should be possible on any platform that supports the golang toolchain. OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS (Apple M1) Supported platforms and architectures","title":"Supported Developer Platforms"},{"location":"developer-guide/onboarding/#prerequisites","text":"","title":"Prerequisites"},{"location":"developer-guide/onboarding/#install-golang-119","text":"The zot project requires golang 1.19 or newer. You can follow these instructions to install the golang toolchain. After installation, make sure that the path environment variable or your IDE can find the toolchain.","title":"Install golang (1.19+)"},{"location":"developer-guide/onboarding/#cloning-zot","text":"The zot registry code base is hosted on GitHub at https://github.com/project-zot/zot . To clone the zot project, use this command: $ git clone https://github.com/project-zot/zot.git","title":"Cloning zot"},{"location":"developer-guide/onboarding/#building-zot","text":"To build zot, execute the make command in the zot directory using the following general syntax: $ make OS=os ARCH=architecture {binary | binary-minimal} The operating system and architecture options are listed in the Supported platforms and architectures table. If an option is not specified, the defaults are linux and amd64 . The binary option builds the full zot binary image with all extensions. The binary-minimal option builds the minimal distribution-spec conformant zot binary image without extensions, reducing the attack surface. For example, to build a zot image with extensions for an Intel-based linux server, use the following command: make OS=linux ARCH=amd64 binary The make command builds an executable image in the zot/bin directory. The original filename of the zot executable image will indicate the build options. For example, the filename of an Intel-based linux minimal image is zot-linux-amd64-minimal .","title":"Building zot"},{"location":"developer-guide/onboarding/#running-zot","text":"The behavior of zot is controlled via configuration only. To launch the zot server, execute the following command: $ bin/zot-linux-amd64 serve examples/config-example.json","title":"Running zot"},{"location":"developer-guide/onboarding/#debugging-zot","text":"To produce a zot binary that includes extensive debugging information, build zot with the binary-debug option, as shown in this example: make OS=linux ARCH=amd64 binary-debug You can then attach and run a debugging tool such as Delve to the running zot process. Delve is a powerful open-source debugger for the Go programming language. Downloads and documentation for Delve are available on GitHub at https://github.com/go-delve/delve .","title":"Debugging zot"},{"location":"developer-guide/onboarding/#code-organization","text":"The zot project codebase is organized as follows: / - pkg/ # Source code for all libraries - api/ # Source code for HTTP APIs - config/ # Global configuration model - storage/ # Source code for storage backends - cli/ # Source code for command line interface (cli) - common/ # Source code for common utility routines - compliance/ # Source code for dist-spec conformance tests - log/ # Source code for logging framework - test/ # Internal test scripts/data - extensions/ # Source code for all extensions - config/ - sync/ - monitoring/ - sync/ - exporter/ # Source code for metrics exporter - cmd/ # Source code for binary main()s - zot/ # Source code for zot binary - zli/ # Source code for zot cli - zb/ # Source code for zb, the dist-spec benchmarking tool - errors/ # Source code for error codes - examples/ # Configuration examples - swagger/ # Swagger integration - docs/ # Documentation","title":"Code Organization"},{"location":"developer-guide/onboarding/#contributor-guidelines","text":"","title":"Contributor Guidelines"},{"location":"developer-guide/onboarding/#license","text":"zot is released under the Apache License 2.0 . All contributions must adhere to this license.","title":"License"},{"location":"developer-guide/onboarding/#developer-certificate-of-origin-dco","text":"All commits require a Developer Certificate of Origin via the \"Signed-off-by:\" commit message and commit signatures using GPG keys.","title":"Developer Certificate of Origin (DCO)"},{"location":"developer-guide/onboarding/#submitting-a-pull-request-pr","text":"First, fork the zot project on GitHub and submit a commit to your fork. Then open a new pull request (PR) to the zot project.","title":"Submitting a Pull Request (PR)"},{"location":"developer-guide/onboarding/#pr-requirements","text":"Any new PR requires a form to be filled out with details about the PR. Appropriate code owners are automatically identified, and they will be notified of the new PR.","title":"PR Requirements"},{"location":"developer-guide/onboarding/#cicd-checks","text":"We take code quality very very seriously. All PRs must pass various CI/CD checks which cover enforce code quality such as code coverage, security scanning, performance regressions, distribution spec conformance, ecosystem client tool compatibility, etc.","title":"CI/CD Checks"},{"location":"developer-guide/onboarding/#reporting-issues","text":"Issues are broadly classified as functional bugs and security issues. The latter is treated a little differently due to the sensitive nature.","title":"Reporting Issues"},{"location":"developer-guide/onboarding/#filing-an-issue","text":"No software is perfect, and we expect users to find issues with the zot code base. First, check whether your issue has already been filed by someone else by doing an issue search . If the issue not found, file a new issue by clicking the New issue button on the zot/issues page and answering the questions. The more information that you can provide, the easier it becomes to triage the issue.","title":"Filing an Issue"},{"location":"developer-guide/onboarding/#security-issues","text":"Security issues are best filed by sending an email to security@zotregistry.io. After 45 days, we will make the issue public and give credit to the original filer of the issue.","title":"Security Issues"},{"location":"developer-guide/onboarding/#code-of-conduct","text":"The zot project follows the CNCF Code of Conduct .","title":"Code of Conduct"},{"location":"developer-guide/onboarding/#reporting","text":"For incidents occurring on the zot project, contact the zot project conduct committee by sending an email to conduct@zotregistry.io. You can expect a response within three business days.","title":"Reporting"},{"location":"general/architecture/","text":"Architecture \u00b6 zot is an OCI-native container image registry. This document discusses the design goals, the overall architecture, and the design choices made in the implementation of the design goals. Design Goals \u00b6 OCI-first \u00b6 HTTP APIs strictly conforms to the OCI Distribution Specification zot intends to be a production reference implementation for the OCI Distribution Specification. In fact, zot does not support any other vendor protocol or specification. Storage layout follows the OCI Image Specification The default and only supported storage layout is the OCI Image Layout. The implications of this choice are that any OCI image layout can be served by zot and conversely, zot converts data on-the-wire into an OCI image layout. Single binary model \u00b6 zot is a single binary image with all features included so that deployment is extremely simple in various environments, including bare-metal, cloud, and embedded devices. Behavior is controlled by a single configuration file. Enable Only What You Need \u00b6 A clear separation exists between (1) the core OCI-compliant HTTP APIs and storage functionality, and (2) other add-on features modeled as extensions . The extension features can be selectively enabled both at build-time and run-time. For more information, see \"Conditional Builds\" in zot 's security posture document. Overall Architecture \u00b6 As shown in the following figure, the architecture of zot is organized as: zot-full = zot-minimal + extensions The minimal build is the core OCI-compliant registry functionality as described by the OCI Distribution Specification . The full build adds features that are not a part of the Distribution Specification, but are allowed to be added as Extensions . External Interaction \u00b6 External interaction with zot consists of the following two types: Client-initiated data or meta-data queries Admin-initiated configuration All client-side interaction occurs over HTTP APIs. The core data path queries are governed by the OCI Distribution Specification . All additional meta-data queries are handled based on the setting of the search extension: If the search extension is enabled, enhanced registry searching and filtering is supported, using graphQL. A database is maintained by zot to efficiently answer complex queries on data stored in the database. If the search extension is not enabled, basic queries are supported using the core APIs. These queries are less efficient and search actual storage, which is limited in content. Configuration \u00b6 A single configuration file governs zot instance behavior. An exception can be made for security concerns, wherein configuration items containing sensitive credentials can be stored in separate files referenced by the main configuration file. Using separate files allows stricter permissions to be enforced on those files if stored locally. Also, modeling as external files allows for storing Kubernetes Secrets . The configuration file is divided into sections for http , storage , log , and extension , governing the behavior of the respective components. Authentication and Authorization \u00b6 A robust set of authentication and authorization options are supported natively in zot . These controls are enforced before access is allowed into the storage layer. For more information, see User Authentication and Authorization with zot . Storage Driver Support \u00b6 zot supports any modern local filesystem. Remote filesystems, such as AWS S3 or any AWS S3-compatible storage system, are supported. Additional driver support is planned in the roadmap. Note: Deduplication is supported for both local and remote filesystems, but deduplication requires a filesystem with hard-link support. For more information, see Storage Planning with zot . Security Scanning \u00b6 zot integrates with the trivy security scanner to scan container images for vulnerabilities. The database is kept current by periodically downloading any vulnerability database updates at a configurable interval. The user remains agnostic of the actual scanner implementation, which may change over time. Extensions \u00b6 Additional registry features that are not a part of the Distribution Specification are added as Extensions . Note: Extension features of zot are available only with a full zot image. They are not supported in a minimal zot image. For more information about extensions, see Extensions . Background Tasks \u00b6 Several periodic tasks occur in the registry, such as garbage collection, sync mirroring, and scrubbing. A task scheduler handles these tasks in the background, taking care not to degrade or interrupt foreground tasks running in the context of HTTP APIs.","title":"Architecture"},{"location":"general/architecture/#architecture","text":"zot is an OCI-native container image registry. This document discusses the design goals, the overall architecture, and the design choices made in the implementation of the design goals.","title":"Architecture"},{"location":"general/architecture/#design-goals","text":"","title":"Design Goals"},{"location":"general/architecture/#oci-first","text":"HTTP APIs strictly conforms to the OCI Distribution Specification zot intends to be a production reference implementation for the OCI Distribution Specification. In fact, zot does not support any other vendor protocol or specification. Storage layout follows the OCI Image Specification The default and only supported storage layout is the OCI Image Layout. The implications of this choice are that any OCI image layout can be served by zot and conversely, zot converts data on-the-wire into an OCI image layout.","title":"OCI-first"},{"location":"general/architecture/#single-binary-model","text":"zot is a single binary image with all features included so that deployment is extremely simple in various environments, including bare-metal, cloud, and embedded devices. Behavior is controlled by a single configuration file.","title":"Single binary model"},{"location":"general/architecture/#enable-only-what-you-need","text":"A clear separation exists between (1) the core OCI-compliant HTTP APIs and storage functionality, and (2) other add-on features modeled as extensions . The extension features can be selectively enabled both at build-time and run-time. For more information, see \"Conditional Builds\" in zot 's security posture document.","title":"Enable Only What You Need"},{"location":"general/architecture/#overall-architecture","text":"As shown in the following figure, the architecture of zot is organized as: zot-full = zot-minimal + extensions The minimal build is the core OCI-compliant registry functionality as described by the OCI Distribution Specification . The full build adds features that are not a part of the Distribution Specification, but are allowed to be added as Extensions .","title":"Overall Architecture"},{"location":"general/architecture/#external-interaction","text":"External interaction with zot consists of the following two types: Client-initiated data or meta-data queries Admin-initiated configuration All client-side interaction occurs over HTTP APIs. The core data path queries are governed by the OCI Distribution Specification . All additional meta-data queries are handled based on the setting of the search extension: If the search extension is enabled, enhanced registry searching and filtering is supported, using graphQL. A database is maintained by zot to efficiently answer complex queries on data stored in the database. If the search extension is not enabled, basic queries are supported using the core APIs. These queries are less efficient and search actual storage, which is limited in content.","title":"External Interaction"},{"location":"general/architecture/#configuration","text":"A single configuration file governs zot instance behavior. An exception can be made for security concerns, wherein configuration items containing sensitive credentials can be stored in separate files referenced by the main configuration file. Using separate files allows stricter permissions to be enforced on those files if stored locally. Also, modeling as external files allows for storing Kubernetes Secrets . The configuration file is divided into sections for http , storage , log , and extension , governing the behavior of the respective components.","title":"Configuration"},{"location":"general/architecture/#authentication-and-authorization","text":"A robust set of authentication and authorization options are supported natively in zot . These controls are enforced before access is allowed into the storage layer. For more information, see User Authentication and Authorization with zot .","title":"Authentication and Authorization"},{"location":"general/architecture/#storage-driver-support","text":"zot supports any modern local filesystem. Remote filesystems, such as AWS S3 or any AWS S3-compatible storage system, are supported. Additional driver support is planned in the roadmap. Note: Deduplication is supported for both local and remote filesystems, but deduplication requires a filesystem with hard-link support. For more information, see Storage Planning with zot .","title":"Storage Driver Support"},{"location":"general/architecture/#security-scanning","text":"zot integrates with the trivy security scanner to scan container images for vulnerabilities. The database is kept current by periodically downloading any vulnerability database updates at a configurable interval. The user remains agnostic of the actual scanner implementation, which may change over time.","title":"Security Scanning"},{"location":"general/architecture/#extensions","text":"Additional registry features that are not a part of the Distribution Specification are added as Extensions . Note: Extension features of zot are available only with a full zot image. They are not supported in a minimal zot image. For more information about extensions, see Extensions .","title":"Extensions"},{"location":"general/architecture/#background-tasks","text":"Several periodic tasks occur in the registry, such as garbage collection, sync mirroring, and scrubbing. A task scheduler handles these tasks in the background, taking care not to degrade or interrupt foreground tasks running in the context of HTTP APIs.","title":"Background Tasks"},{"location":"general/concepts/","text":"Concepts \u00b6 What is zot ? \u00b6 Zot is a production-ready, open-source, vendor-neutral container image registry server based purely on OCI standards. Two broad trends are changing how we build, distribute, and consume software. The first trend is the increasing adoption of container technologies. The second trend is that software solutions are being composed by combining elements from various sources rather than being built entirely from scratch. The latter trend raises the importance of software provenance and supply chain security. In both trends, zot intends to play an important role by providing a production-ready, open-source, vendor-neutral container image registry server based purely on OCI standards. What is an OCI image registry? \u00b6 An OCI image registry is a server-based application that allows you to store, manage, and share container images. A developer uploads (pushes) an image to the registry for distribution. Users can then download (pull) the image to run on their systems. The OCI Distribution Specification , published by the Open Container Initiative (OCI), defines a standard API protocol for these and other image registry operations. An image registry can be a part of your continuous integration and continuous deployment (CI/CD) pipeline when you host zot on your public or private server. In its minimal form, you can also embed a zot registry in a product. In either case, zot provides a secure software supply chain for container images. Why zot ? \u00b6 zot = OCI Distribution Specification + OCI Image Format At its heart, zot is a production-ready, vendor-neutral OCI image registry with images stored in the OCI image format and with the OCI distribution specification on-the-wire. zot is built for developers by developers, offering features such as minimal deployment using a single binary image, built-in authentication and authorization, and inline garbage collection and storage deduplication. Some of the principal advantages of zot are: Open source OCI standards-only both on-the-wire and on-disk Clear separation between core distribution spec and zot-specific extensions Software supply chain security, including support for cosign and notation Security hardening Single binary with many features built-in Suitable for deployments in cloud, bare-metal, and embedded devices zot fully conforms to the OCI Distribution Specification . The following table lists additional advantages of zot : Distribution Spec conformance yes CNCF project submitted License Apache 2.0 On-premise deployment yes OCI conformance * yes Single binary image * yes Minimal build * yes Storage Layout OCIv1 Image Layout Authentication built-in Authorization built-in Garbage collection inline Storage deduplication inline Cloud storage support yes Delete by tag yes Vulnerability scanning built-in Command line interface (cli) yes UI yes External contributions beta available Image signatures built-in Note: * The minimal build feature is the ability to build a minimal Distribution Spec compliant registry in order to reduce library dependencies and the possible attack surface.","title":"Concepts"},{"location":"general/concepts/#concepts","text":"","title":"Concepts"},{"location":"general/concepts/#what-is-zot","text":"Zot is a production-ready, open-source, vendor-neutral container image registry server based purely on OCI standards. Two broad trends are changing how we build, distribute, and consume software. The first trend is the increasing adoption of container technologies. The second trend is that software solutions are being composed by combining elements from various sources rather than being built entirely from scratch. The latter trend raises the importance of software provenance and supply chain security. In both trends, zot intends to play an important role by providing a production-ready, open-source, vendor-neutral container image registry server based purely on OCI standards.","title":"What is zot?"},{"location":"general/concepts/#what-is-an-oci-image-registry","text":"An OCI image registry is a server-based application that allows you to store, manage, and share container images. A developer uploads (pushes) an image to the registry for distribution. Users can then download (pull) the image to run on their systems. The OCI Distribution Specification , published by the Open Container Initiative (OCI), defines a standard API protocol for these and other image registry operations. An image registry can be a part of your continuous integration and continuous deployment (CI/CD) pipeline when you host zot on your public or private server. In its minimal form, you can also embed a zot registry in a product. In either case, zot provides a secure software supply chain for container images.","title":"What is an OCI image registry?"},{"location":"general/concepts/#why-zot","text":"zot = OCI Distribution Specification + OCI Image Format At its heart, zot is a production-ready, vendor-neutral OCI image registry with images stored in the OCI image format and with the OCI distribution specification on-the-wire. zot is built for developers by developers, offering features such as minimal deployment using a single binary image, built-in authentication and authorization, and inline garbage collection and storage deduplication. Some of the principal advantages of zot are: Open source OCI standards-only both on-the-wire and on-disk Clear separation between core distribution spec and zot-specific extensions Software supply chain security, including support for cosign and notation Security hardening Single binary with many features built-in Suitable for deployments in cloud, bare-metal, and embedded devices zot fully conforms to the OCI Distribution Specification . The following table lists additional advantages of zot : Distribution Spec conformance yes CNCF project submitted License Apache 2.0 On-premise deployment yes OCI conformance * yes Single binary image * yes Minimal build * yes Storage Layout OCIv1 Image Layout Authentication built-in Authorization built-in Garbage collection inline Storage deduplication inline Cloud storage support yes Delete by tag yes Vulnerability scanning built-in Command line interface (cli) yes UI yes External contributions beta available Image signatures built-in Note: * The minimal build feature is the ability to build a minimal Distribution Spec compliant registry in order to reduce library dependencies and the possible attack surface.","title":"Why zot?"},{"location":"general/extensions/","text":"Extensions \u00b6 Extensions provide additional registry features that are not a part of the Distribution Specification. The following extensions are currently available with zot : Search (enhanced) Sync Lint Scrub Metrics About extensions \u00b6 The OCI Distribution Specification supports extending the functionality of an OCI-compliant registry implementation by adding extensions . Extensions are new APIs developed outside of the core OCI specs. Developers may propose their extensions to the OCI for possible future addition to the Distribution Specification. Wherever applicable, extensions can be dynamically discovered using the extensions support of the OCI Distribution Specification. Extension features of zot are available only with a full zot image. They are excluded from the minimal zot image. Extensions implemented in zot \u00b6 The following extensions are currently supported: Search \u00b6 One of the key functions of a container image registry (which is essentially a graph of blobs) is the ability to perform interesting image and graph traversal queries. The user interacts with the search extension via a graphQL endpoint. The schema is published with every release. Examples of queries are: \"Does an image exist?\" \"What is its size?\" \"Does an image depend on this image via its layers?\" \"What vulnerabilities exist in an image or its dependent images?\" Currently, search is the only zot extension that is accessible via HTTP APIs and is discoverable using the OCI extensions mechanism. Sync \u00b6 You can deplay a local mirror pointing to an upstream zot instance with various container image download policies, including on-demand and periodic downloads. The sync function is useful to avoid overwhelming the upstream instance, or if the upstream instance has rate-limited access. docker.io is supported as an upstream mirror. Lint \u00b6 The lint extension helps to avoid image compliance issues by enforcing certain policies about the image or the image metadata. Currently, lint can check an uploaded image to enforce the presence of required annotations such as the author or the license. Scrub \u00b6 Although container images are content-addressable with their SHA256 checksums, and validations are performed during storage and retrieval, it is possible that bit-rot sets in when not in use. The scrub extension actively scans container images in the background to proactively detect errors. Metrics \u00b6 The metrics extension adds a node exporter, which is not present in the minimal build. For information about configuring zot extensions, see Configuring zot .","title":"Extensions"},{"location":"general/extensions/#extensions","text":"Extensions provide additional registry features that are not a part of the Distribution Specification. The following extensions are currently available with zot : Search (enhanced) Sync Lint Scrub Metrics","title":"Extensions"},{"location":"general/extensions/#about-extensions","text":"The OCI Distribution Specification supports extending the functionality of an OCI-compliant registry implementation by adding extensions . Extensions are new APIs developed outside of the core OCI specs. Developers may propose their extensions to the OCI for possible future addition to the Distribution Specification. Wherever applicable, extensions can be dynamically discovered using the extensions support of the OCI Distribution Specification. Extension features of zot are available only with a full zot image. They are excluded from the minimal zot image.","title":"About extensions"},{"location":"general/extensions/#extensions-implemented-in-zot","text":"The following extensions are currently supported:","title":"Extensions implemented in zot"},{"location":"general/extensions/#search","text":"One of the key functions of a container image registry (which is essentially a graph of blobs) is the ability to perform interesting image and graph traversal queries. The user interacts with the search extension via a graphQL endpoint. The schema is published with every release. Examples of queries are: \"Does an image exist?\" \"What is its size?\" \"Does an image depend on this image via its layers?\" \"What vulnerabilities exist in an image or its dependent images?\" Currently, search is the only zot extension that is accessible via HTTP APIs and is discoverable using the OCI extensions mechanism.","title":"Search"},{"location":"general/extensions/#sync","text":"You can deplay a local mirror pointing to an upstream zot instance with various container image download policies, including on-demand and periodic downloads. The sync function is useful to avoid overwhelming the upstream instance, or if the upstream instance has rate-limited access. docker.io is supported as an upstream mirror.","title":"Sync"},{"location":"general/extensions/#lint","text":"The lint extension helps to avoid image compliance issues by enforcing certain policies about the image or the image metadata. Currently, lint can check an uploaded image to enforce the presence of required annotations such as the author or the license.","title":"Lint"},{"location":"general/extensions/#scrub","text":"Although container images are content-addressable with their SHA256 checksums, and validations are performed during storage and retrieval, it is possible that bit-rot sets in when not in use. The scrub extension actively scans container images in the background to proactively detect errors.","title":"Scrub"},{"location":"general/extensions/#metrics","text":"The metrics extension adds a node exporter, which is not present in the minimal build. For information about configuring zot extensions, see Configuring zot .","title":"Metrics"},{"location":"general/features/","text":"Summary of Key Features \u00b6 Conforms to OCI distribution spec APIs Uses OCI image layout for image storage Can serve any OCI image layout as a registry Single binary for all the features Doesn't require root privileges Clear separation between core dist-spec and zot-specific extensions Supports container image signatures - cosign and notation Supports helm charts Behavior controlled via configuration Binaries released for multiple os/arch | OS | Arch | Use Case | | --- | --- | --- | | linux | amd64 | Intel-based Linux platforms | | linux | arm64 | ARM servers and Raspberry PI4 | | darwin | amd64 | Intel-based Macs | | darwin | arm64 | ARM-based Macs | Supports advanced image queries using search extension Supports image deletion by tag Currently suitable for on-prem deployments (e.g. colocated with Kubernetes) Compatible with ecosystem tools such as skopeo and cri-o Vulnerability scanning of images TLS support Authentication via: TLS mutual authentication HTTP Basic (local htpasswd and LDAP) HTTP Bearer token Supports Identity-Based Access Control Supports live modifications on the config file while zot is running (Authorization config only) Inline storage optimizations: Automatic garbage collection of orphaned blobs Layer deduplication using hard links when content is identical Data scrubbing Serve multiple storage paths (and backends) using a single zot server Pull and synchronize from other dist-spec conformant registries sync Supports ratelimiting including per HTTP method Metrics with Prometheus Using a node exporter in case of minimal zot Swagger based documentation zli : command-line client support Also, zb : a benchmarking tool for dist-spec conformant registries Released under Apache 2.0 License","title":"Key Features"},{"location":"general/features/#summary-of-key-features","text":"Conforms to OCI distribution spec APIs Uses OCI image layout for image storage Can serve any OCI image layout as a registry Single binary for all the features Doesn't require root privileges Clear separation between core dist-spec and zot-specific extensions Supports container image signatures - cosign and notation Supports helm charts Behavior controlled via configuration Binaries released for multiple os/arch | OS | Arch | Use Case | | --- | --- | --- | | linux | amd64 | Intel-based Linux platforms | | linux | arm64 | ARM servers and Raspberry PI4 | | darwin | amd64 | Intel-based Macs | | darwin | arm64 | ARM-based Macs | Supports advanced image queries using search extension Supports image deletion by tag Currently suitable for on-prem deployments (e.g. colocated with Kubernetes) Compatible with ecosystem tools such as skopeo and cri-o Vulnerability scanning of images TLS support Authentication via: TLS mutual authentication HTTP Basic (local htpasswd and LDAP) HTTP Bearer token Supports Identity-Based Access Control Supports live modifications on the config file while zot is running (Authorization config only) Inline storage optimizations: Automatic garbage collection of orphaned blobs Layer deduplication using hard links when content is identical Data scrubbing Serve multiple storage paths (and backends) using a single zot server Pull and synchronize from other dist-spec conformant registries sync Supports ratelimiting including per HTTP method Metrics with Prometheus Using a node exporter in case of minimal zot Swagger based documentation zli : command-line client support Also, zb : a benchmarking tool for dist-spec conformant registries Released under Apache 2.0 License","title":"Summary of Key Features"},{"location":"general/project/","text":"About the zot Project \u00b6 Project Repository \u00b6 The zot project is hosted on GitHub: project-zot/zot Sponsors \u00b6 Cisco Systems, Inc. Presentations \u00b6 OCI Weekly Discussion - Oct 2, 2019","title":"About"},{"location":"general/project/#about-the-zot-project","text":"","title":"About the zot Project"},{"location":"general/project/#project-repository","text":"The zot project is hosted on GitHub: project-zot/zot","title":"Project Repository"},{"location":"general/project/#sponsors","text":"Cisco Systems, Inc.","title":"Sponsors"},{"location":"general/project/#presentations","text":"OCI Weekly Discussion - Oct 2, 2019","title":"Presentations"},{"location":"general/releases/","text":"Released Images for zot \u00b6 This document describes the available zot images for the various supported hardware and software platforms, along with information about image variations, image locations, and image naming formats. Supported platforms \u00b6 zot is supported on Linux and Apple MacOS platforms with Intel or ARM processors. Table: Supported platforms and architectures OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS (Apple M1) Full and minimal binary images \u00b6 In addition to variations for specific platforms and architectures, binary images are also available in full and minimal flavors: A full zot binary image is compiled with all extensions. Extensions include functions such as metrics, registry synchronization, search, and scrub. A minimal distribution-spec conformant zot binary image is compiled with only a minimal set of code and libraries, reducing the attack surface. This option might be optimal for a registry embedded in a shipping product. Binary image file naming \u00b6 An executable binary image for zot is named using the target platform and architecture from the Supported platforms and architectures table. The general format of a binary image file name is one of these two: zot-<os>-<architecture> A full zot binary image with all extensions has a filename of the form zot-<os>-<architecture>. For example, the full binary image for an Intel-based linux server is zot-linux-amd64 . zot-<os>-<architecture>-minimal A minimal distribution-spec conformant zot binary image has a filename of the form zot-<os>-<architecture>-minimal . For example, the minimal binary image for an Intel-based linux server is zot-linux-amd64-minimal . Tip: For convenience, you can rename the binary image file to simply zot after downloading. Where to get zot \u00b6 The zot project is hosted on GitHub at project-zot . You can download a specific image from ghcr.io by forming a URL with the desired image name, such as: https://ghcr.io/project-zot/zot-<os>-<architecture>[-<build>] If <build> is not specified, the default is full . For example, to download the minimal binary image for an Intel-based linux server. The URL is: https://ghcr.io/project-zot/zot-linux-amd64-minimal zot images are also currently hosted in these publicly-accessible repositories: zotregistry.io artifacthub.io You can download native executable binary images or container (Docker) images. Note: When downloading a container image for MacOS, download the Linux image, not the Darwin image. When downloading an executable binary, download the Darwin image. Tip: You may need to use the chmod command to make the image executable. Licensing \u00b6 zot is released under the Apache License 2.0 .","title":"Released Images"},{"location":"general/releases/#released-images-for-zot","text":"This document describes the available zot images for the various supported hardware and software platforms, along with information about image variations, image locations, and image naming formats.","title":"Released Images for zot"},{"location":"general/releases/#supported-platforms","text":"zot is supported on Linux and Apple MacOS platforms with Intel or ARM processors. Table: Supported platforms and architectures OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS (Apple M1)","title":"Supported platforms"},{"location":"general/releases/#full-and-minimal-binary-images","text":"In addition to variations for specific platforms and architectures, binary images are also available in full and minimal flavors: A full zot binary image is compiled with all extensions. Extensions include functions such as metrics, registry synchronization, search, and scrub. A minimal distribution-spec conformant zot binary image is compiled with only a minimal set of code and libraries, reducing the attack surface. This option might be optimal for a registry embedded in a shipping product.","title":"Full and minimal binary images"},{"location":"general/releases/#binary-image-file-naming","text":"An executable binary image for zot is named using the target platform and architecture from the Supported platforms and architectures table. The general format of a binary image file name is one of these two: zot-<os>-<architecture> A full zot binary image with all extensions has a filename of the form zot-<os>-<architecture>. For example, the full binary image for an Intel-based linux server is zot-linux-amd64 . zot-<os>-<architecture>-minimal A minimal distribution-spec conformant zot binary image has a filename of the form zot-<os>-<architecture>-minimal . For example, the minimal binary image for an Intel-based linux server is zot-linux-amd64-minimal . Tip: For convenience, you can rename the binary image file to simply zot after downloading.","title":"Binary image file naming"},{"location":"general/releases/#where-to-get-zot","text":"The zot project is hosted on GitHub at project-zot . You can download a specific image from ghcr.io by forming a URL with the desired image name, such as: https://ghcr.io/project-zot/zot-<os>-<architecture>[-<build>] If <build> is not specified, the default is full . For example, to download the minimal binary image for an Intel-based linux server. The URL is: https://ghcr.io/project-zot/zot-linux-amd64-minimal zot images are also currently hosted in these publicly-accessible repositories: zotregistry.io artifacthub.io You can download native executable binary images or container (Docker) images. Note: When downloading a container image for MacOS, download the Linux image, not the Darwin image. When downloading an executable binary, download the Darwin image. Tip: You may need to use the chmod command to make the image executable.","title":"Where to get zot"},{"location":"general/releases/#licensing","text":"zot is released under the Apache License 2.0 .","title":"Licensing"},{"location":"general/whats-new/","text":"What's New \u00b6 v1.4.3 \u00b6 Support for OCI Artifacts and References \u00b6 The OCI Image Spec v1.1.0 supports arbitrary artifact types and references so that software supply chain use cases can be supported (SBOMs, signatures, etc). Currently, oras v0.1.60 and regclient support this spec. Remote-only Storage Support \u00b6 The two types of state (images and image metadata) can both now be on remote storage so that zot process lifecycle and its storage can be managed and scaled independently. Digest Collision Detection During Image Deletion \u00b6 When two or more image tags point to the same image digest and the image is deleted by digest causes data loss and dangling references. A new behavior-based policy called detectManifestCollision was added to prevent this.","title":"What's New"},{"location":"general/whats-new/#whats-new","text":"","title":"What's New"},{"location":"general/whats-new/#v143","text":"","title":"v1.4.3"},{"location":"general/whats-new/#support-for-oci-artifacts-and-references","text":"The OCI Image Spec v1.1.0 supports arbitrary artifact types and references so that software supply chain use cases can be supported (SBOMs, signatures, etc). Currently, oras v0.1.60 and regclient support this spec.","title":"Support for OCI Artifacts and References"},{"location":"general/whats-new/#remote-only-storage-support","text":"The two types of state (images and image metadata) can both now be on remote storage so that zot process lifecycle and its storage can be managed and scaled independently.","title":"Remote-only Storage Support"},{"location":"general/whats-new/#digest-collision-detection-during-image-deletion","text":"When two or more image tags point to the same image digest and the image is deleted by digest causes data loss and dangling references. A new behavior-based policy called detectManifestCollision was added to prevent this.","title":"Digest Collision Detection During Image Deletion"},{"location":"install-guides/install-guide-k8s/","text":"Installing zot with Kubernetes and Helm \u00b6 Using Kubernetes with Helm charts for zot, you can easily deploy zot as an application in a Kubernetes cluster. Before you begin \u00b6 Prerequisites \u00b6 kubectl must be installed and a Kubernetes cluster must be ready. Helm must be installed. Supported platforms \u00b6 You can install zot on standard Linux platforms with Intel or ARM processors and with systemd installed. OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 Supported platforms and architectures About binary images \u00b6 Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats. Installing zot \u00b6 Step 1: Locate the Helm charts in a remote repository \u00b6 Specify a remote repository that contains the Helm charts for zot. Give the repo a local name, such as project-zot , as in this example: $ helm repo add project-zot http://zotregistry.io/helm-charts \"project-zot\" has been added to your repositories Note: The Helm charts for zot are currently hosted in these publicly-accessible repositories: - zotregistry.io - artifacthub.io Search the repository to see the Helm charts for zot installation. Search using the keyword 'project-zot' or 'zot', as in this example: $ helm search repo project-zot NAME CHART VERSION APP VERSION DESCRIPTION project-zot/zot 0.1.0 v1.4.3 A Helm chart for Kubernetes Note: The APP VERSION is the version/tag of the zot image used for the deployment. Update to the latest information of available charts from the chart repository, as shown in this example: $ helm repo update project-zot Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \"project-zot\" chart repository Update Complete. \u2388Happy Helming!\u2388 Display the default information of the Helm chart, as shown in this example: $ helm show all project-zot/zot apiVersion : v2 appVersion : v1.4.3 description : A Helm chart for Kubernetes name : zot type : application version : 0.1.16 # Default values for zot. # This is a YAML-formatted file. # Declare variables to be passed into your templates. replicaCount : 1 image : repository : ghcr.io/project-zot/zot-linux-amd64 pullPolicy : IfNotPresent tag : \"v1.4.3\" serviceAccount : create : true annotations : {} name : \"\" service : type : NodePort port : 5000 Step 2: Determine any needed changes from the Helm chart\u2019s defaults \u00b6 Inspect the default information of the Helm chart, as shown in the previous step. In many cases, the default chart values may be acceptable. If your installation requires any non-default settings, you may be able to specify them during the installation. Not all chart values are configurable, but you can display those that are configurable using the command in the following example: $ helm show values project-zot/zot # Default values for zot. # This is a YAML-formatted file. # Declare variables to be passed into your templates. replicaCount : 1 image : repository : ghcr.io/project-zot/zot-linux-amd64 pullPolicy : IfNotPresent tag : \"v1.4.3\" serviceAccount : create : true annotations : {} name : \"\" service : type : NodePort port : 5000 The configurable settings in the chart are listed in the following table: parameter description replicaCount Desired number of replicas of the application image.repository Repository and image name for the application image.pullPolicy Whether to pull the image from the repository. If not specified, the policy depends on image.tag : If tag is :latest or no tag: Always If tag is other than :latest : IfNotPresent image.tag Identifies different versions the image. default is the chart appVersion . Examples: :latest (the default) or :v1.4.3 serviceAccount.create Specifies whether a service account should be created serviceAccount.annotations Annotations to add to the service account serviceAccount.name Name of the service account to use. If name is not set and create is true, a name is generated using the fullname template. service.type ClusterIP (default), NodePort, LoadBalancer, ExternalName, or Headless service.port Port number for calling the service Customizing the Helm chart using 'set' \u00b6 To override the default values in the chart, you can pass your custom values by adding the --set flag in the helm install command. For example, if your servers use an ARM processor instead of Intel, you must change the image.repository name from zot-linux-amd64 to zot-linux-arm64 : --set image.repository=ghcr.io/project-zot/zot-linux-arm64 You can change multiple settings with one --set statement. For example, you might want your installation to have more replicas or a different port number: --set replicaCount=2,service.port=5050 Customizing the Helm chart using a file \u00b6 You can also create a YAML file with your overrides and then add the new file by adding the -f flag to the helm install command. For example, to override the replica count and port number, the contents of your YAML file (for example, \"myfile.yaml\") would be: replicaCount : 2 service : port : 5050 and the following flag would be added to the helm install command: -f myfile.yaml Additional information \u00b6 See the Helm documentation for further information about modifying the Helm chart. Step 3: Install zot \u00b6 Install zot using the helm install command. The first example shows how to perform a default installation. The additional examples show different ways to modify the helm install command to override default settings in the Helm chart: Example 1: use default chart parameters $ helm install zot project-zot/zot NAME: zot LAST DEPLOYED: Thu Aug 11 19:13:02 2022 NAMESPACE: default STATUS: deployed REVISION: 1 NOTES: Get the application URL by running these commands: export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services zot) export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\") echo http://$NODE_IP:$NODE_PORT Example 2: modify specific chart parameters with 'set' $ helm install --set replicaCount=2,service.port=5050 zot project-zot/zot Example 3: modify specific chart parameters with a file $ helm install -f myfile.yaml zot project-zot/zot Example 4: use a specific version of the Helm chart $ helm install zot project-zot/zot --version 0.1.0 Example 5: link to a kubeconfig file $ helm install zot project-zot/zot --kubeconfig $HOME/.kube/config After the installation \u00b6 Verify the installation \u00b6 List all releases that are either deployed or failed. $ helm list NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION zot default 1 <datetime> deployed zot-0.1.0 v1.4.3 This response indicates that zot is deployed. After making sure that your pods are up and running, execute the following commands: $ export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services zot) $ export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\") $ echo http://$NODE_IP:$NODE_PORT $ curl http://$NODE_IP:$NODE_PORT/v2/_catalog The response should display the current contents of your zot repository, which should be empty immediately after installation: {\"repositories\":[]} Edit the zot configuration file \u00b6 The zot configuration file is a JSON or YAML file that contains all configuration settings for zot functions such as: network storage authentication authorization logging metrics synchronization with other registries clustering The Helm chart installs a minimal JSON configuration file as shown below: { \"storage\" : { \"rootDirectory\" : \"/var/lib/registry\" }, \"http\" : { \"address\" : \"0.0.0.0\" , \"port\" : \"5000\" }, \"log\" : { \"level\" : \"debug\" } } The zot configuration file is located at /etc/zot/config.json . Refer to Configuring zot for complete information on configuring the zot server with the zot configuration file. Uninstalling zot \u00b6 Should you need to uninstall zot, use the helm uninstall command, as in this example: $ helm uninstall zot","title":"Installing zot with Kubernetes and Helm"},{"location":"install-guides/install-guide-k8s/#installing-zot-with-kubernetes-and-helm","text":"Using Kubernetes with Helm charts for zot, you can easily deploy zot as an application in a Kubernetes cluster.","title":"Installing zot with Kubernetes and Helm"},{"location":"install-guides/install-guide-k8s/#before-you-begin","text":"","title":"Before you begin"},{"location":"install-guides/install-guide-k8s/#prerequisites","text":"kubectl must be installed and a Kubernetes cluster must be ready. Helm must be installed.","title":"Prerequisites"},{"location":"install-guides/install-guide-k8s/#supported-platforms","text":"You can install zot on standard Linux platforms with Intel or ARM processors and with systemd installed. OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 Supported platforms and architectures","title":"Supported platforms"},{"location":"install-guides/install-guide-k8s/#about-binary-images","text":"Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats.","title":"About binary images"},{"location":"install-guides/install-guide-k8s/#installing-zot","text":"","title":"Installing zot"},{"location":"install-guides/install-guide-k8s/#step-1-locate-the-helm-charts-in-a-remote-repository","text":"Specify a remote repository that contains the Helm charts for zot. Give the repo a local name, such as project-zot , as in this example: $ helm repo add project-zot http://zotregistry.io/helm-charts \"project-zot\" has been added to your repositories Note: The Helm charts for zot are currently hosted in these publicly-accessible repositories: - zotregistry.io - artifacthub.io Search the repository to see the Helm charts for zot installation. Search using the keyword 'project-zot' or 'zot', as in this example: $ helm search repo project-zot NAME CHART VERSION APP VERSION DESCRIPTION project-zot/zot 0.1.0 v1.4.3 A Helm chart for Kubernetes Note: The APP VERSION is the version/tag of the zot image used for the deployment. Update to the latest information of available charts from the chart repository, as shown in this example: $ helm repo update project-zot Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \"project-zot\" chart repository Update Complete. \u2388Happy Helming!\u2388 Display the default information of the Helm chart, as shown in this example: $ helm show all project-zot/zot apiVersion : v2 appVersion : v1.4.3 description : A Helm chart for Kubernetes name : zot type : application version : 0.1.16 # Default values for zot. # This is a YAML-formatted file. # Declare variables to be passed into your templates. replicaCount : 1 image : repository : ghcr.io/project-zot/zot-linux-amd64 pullPolicy : IfNotPresent tag : \"v1.4.3\" serviceAccount : create : true annotations : {} name : \"\" service : type : NodePort port : 5000","title":"Step 1: Locate the Helm charts in a remote repository"},{"location":"install-guides/install-guide-k8s/#step-2-determine-any-needed-changes-from-the-helm-charts-defaults","text":"Inspect the default information of the Helm chart, as shown in the previous step. In many cases, the default chart values may be acceptable. If your installation requires any non-default settings, you may be able to specify them during the installation. Not all chart values are configurable, but you can display those that are configurable using the command in the following example: $ helm show values project-zot/zot # Default values for zot. # This is a YAML-formatted file. # Declare variables to be passed into your templates. replicaCount : 1 image : repository : ghcr.io/project-zot/zot-linux-amd64 pullPolicy : IfNotPresent tag : \"v1.4.3\" serviceAccount : create : true annotations : {} name : \"\" service : type : NodePort port : 5000 The configurable settings in the chart are listed in the following table: parameter description replicaCount Desired number of replicas of the application image.repository Repository and image name for the application image.pullPolicy Whether to pull the image from the repository. If not specified, the policy depends on image.tag : If tag is :latest or no tag: Always If tag is other than :latest : IfNotPresent image.tag Identifies different versions the image. default is the chart appVersion . Examples: :latest (the default) or :v1.4.3 serviceAccount.create Specifies whether a service account should be created serviceAccount.annotations Annotations to add to the service account serviceAccount.name Name of the service account to use. If name is not set and create is true, a name is generated using the fullname template. service.type ClusterIP (default), NodePort, LoadBalancer, ExternalName, or Headless service.port Port number for calling the service","title":"Step 2: Determine any needed changes from the Helm chart\u2019s defaults"},{"location":"install-guides/install-guide-k8s/#customizing-the-helm-chart-using-set","text":"To override the default values in the chart, you can pass your custom values by adding the --set flag in the helm install command. For example, if your servers use an ARM processor instead of Intel, you must change the image.repository name from zot-linux-amd64 to zot-linux-arm64 : --set image.repository=ghcr.io/project-zot/zot-linux-arm64 You can change multiple settings with one --set statement. For example, you might want your installation to have more replicas or a different port number: --set replicaCount=2,service.port=5050","title":"Customizing the Helm chart using 'set'"},{"location":"install-guides/install-guide-k8s/#customizing-the-helm-chart-using-a-file","text":"You can also create a YAML file with your overrides and then add the new file by adding the -f flag to the helm install command. For example, to override the replica count and port number, the contents of your YAML file (for example, \"myfile.yaml\") would be: replicaCount : 2 service : port : 5050 and the following flag would be added to the helm install command: -f myfile.yaml","title":"Customizing the Helm chart using a file"},{"location":"install-guides/install-guide-k8s/#additional-information","text":"See the Helm documentation for further information about modifying the Helm chart.","title":"Additional information"},{"location":"install-guides/install-guide-k8s/#step-3-install-zot","text":"Install zot using the helm install command. The first example shows how to perform a default installation. The additional examples show different ways to modify the helm install command to override default settings in the Helm chart: Example 1: use default chart parameters $ helm install zot project-zot/zot NAME: zot LAST DEPLOYED: Thu Aug 11 19:13:02 2022 NAMESPACE: default STATUS: deployed REVISION: 1 NOTES: Get the application URL by running these commands: export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services zot) export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\") echo http://$NODE_IP:$NODE_PORT Example 2: modify specific chart parameters with 'set' $ helm install --set replicaCount=2,service.port=5050 zot project-zot/zot Example 3: modify specific chart parameters with a file $ helm install -f myfile.yaml zot project-zot/zot Example 4: use a specific version of the Helm chart $ helm install zot project-zot/zot --version 0.1.0 Example 5: link to a kubeconfig file $ helm install zot project-zot/zot --kubeconfig $HOME/.kube/config","title":"Step 3: Install zot"},{"location":"install-guides/install-guide-k8s/#after-the-installation","text":"","title":"After the installation"},{"location":"install-guides/install-guide-k8s/#verify-the-installation","text":"List all releases that are either deployed or failed. $ helm list NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION zot default 1 <datetime> deployed zot-0.1.0 v1.4.3 This response indicates that zot is deployed. After making sure that your pods are up and running, execute the following commands: $ export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services zot) $ export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\") $ echo http://$NODE_IP:$NODE_PORT $ curl http://$NODE_IP:$NODE_PORT/v2/_catalog The response should display the current contents of your zot repository, which should be empty immediately after installation: {\"repositories\":[]}","title":"Verify the installation"},{"location":"install-guides/install-guide-k8s/#edit-the-zot-configuration-file","text":"The zot configuration file is a JSON or YAML file that contains all configuration settings for zot functions such as: network storage authentication authorization logging metrics synchronization with other registries clustering The Helm chart installs a minimal JSON configuration file as shown below: { \"storage\" : { \"rootDirectory\" : \"/var/lib/registry\" }, \"http\" : { \"address\" : \"0.0.0.0\" , \"port\" : \"5000\" }, \"log\" : { \"level\" : \"debug\" } } The zot configuration file is located at /etc/zot/config.json . Refer to Configuring zot for complete information on configuring the zot server with the zot configuration file.","title":"Edit the zot configuration file"},{"location":"install-guides/install-guide-k8s/#uninstalling-zot","text":"Should you need to uninstall zot, use the helm uninstall command, as in this example: $ helm uninstall zot","title":"Uninstalling zot"},{"location":"install-guides/install-guide-linux/","text":"Installing zot on Bare Metal Linux \u00b6 Before you begin \u00b6 About binary images \u00b6 Executable binary zot images are available for multiple platforms and architectures and with full or minimal implementations. Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats. Installation \u00b6 Step 1: Get zot \u00b6 Using wget, download the appropriate zot binary image for your platform from the zot GitHub project . Download the image to the`/usr/bin/` directory and rename it to zot, as in this example: $ wget -O /usr/bin/zot https://github.com/project-zot/zot/releases/download/v1.4.2-rc2/zot-linux-amd64 Step 2: Create a zot configuration file \u00b6 Create a zot configuration file as /etc/zot/config.json . See Configuration file options for an example file with options and recommendations. You can find other configuration file examples in the zot GitHub project and in Configuring zot . Step 3: Configure a local authentication account \u00b6 If you want to use local authentication with zot, create a /etc/zot/htpasswd file with an initial account entry using the htpasswd command as in this example: $ htpasswd -bnB myUserName myPassword > /etc/zot/htpasswd To add additional local users, use the >> redirect as in this example: $ htpasswd -bnB myUserName2 myPassword2 >> /etc/zot/htpasswd Step 4: Define the zot service \u00b6 Create a /etc/systemd/system/zot.service file to define the zot service in systemd. The following is an example service file for zot: [Unit] Description=OCI Distribution Registry Documentation=https://zotregistry.io/ After=network.target auditd.service local-fs.target [Service] Type=simple ExecStart=/usr/bin/zot serve /etc/zot/config.json Restart=on-failure User=zot Group=zot LimitNOFILE=500000 MemoryHigh=30G MemoryMax=32G [Install] WantedBy=multi-user.target Note: Be sure to configure a dedicated non-root user ID as the User and Group in the zot service definition. The 'zot' user ID in this example is created in the next step. Step 5: Create a user ID to own the zot service \u00b6 Create a non-root user ID to be the owner of the zot service and its resources. In this example, the user ID 'zot' is created with the adduser command, and resource ownership is assigned. $ sudo adduser --no-create-home --disabled-password --gecos --disabled-login zot $ sudo mkdir -p /data/zot $ sudo chown -R zot:zot /data/zot $ sudo mkdir -p /var/log/zot $ sudo chown -R zot:zot /var/log/zot $ sudo chown root:root /usr/bin/zot $ sudo chown root:root config.json With the adduser options shown, the 'zot' user ID has no local directory. There is no ability to log into the zot user account, and the account has no finger information. Step 6: Start zot \u00b6 Enable and start the zot service with these commands: $ sudo systemctl enable zot $ sudo systemctl start zot When the zot service has started, you can check its status with this command: $ sudo systemctl status zot After the installation \u00b6 If your zot registry server is public facing, we recommend that you test your TLS configuration using a service such as the Qualys SSL Server Test . Refer to Configuring zot for further information about maintaining your zot registry server. Configuration file options and recommendations \u00b6 The following zot configuration file ( config.json ) can be used as a template for your own installation. You can modify this file to suit your own environment. Click here to view the sample configuration file. { \"distSpecVersion\" : \"1.0.1\" , \"storage\" :{ \"dedupe\" : true , \"gc\" : true , \"gcDelay\" : \"1h\" , \"gcInterval\" : \"6h\" , \"rootDirectory\" : \"/data/zot/\" }, \"http\" : { \"address\" : \"0.0.0.0\" , \"port\" : \"443\" , \"realm\" : \"zot\" , \"tls\" : { \"cert\" : \"/etc/letsencrypt/live/zothub.io/fullchain.pem\" , \"key\" : \"/etc/letsencrypt/live/zothub.io/privkey.pem\" }, \"auth\" : { \"htpasswd\" : { \"path\" : \"/etc/zot/htpasswd\" }, \"failDelay\" : 5 }, \"allowReadAccess\" : true }, \"log\" :{ \"level\" : \"debug\" , \"output\" : \"/var/log/zot/zot.log\" , \"audit\" : \"/var/log/zot/zot-audit.log\" }, \"extensions\" : { \"search\" : { \"enable\" : true , \"cve\" : { \"updateInterval\" : \"24h\" } }, \"sync\" : { \"enable\" : false , \"registries\" : [ { \"urls\" : [ \"https://mirror.gcr.io/library\" ], \"onDemand\" : true , \"maxRetries\" : 3 , \"retryDelay\" : \"5m\" , \"pollInterval\" : \"6h\" }, { \"urls\" : [ \"https://docker.io/library\" ], \"onDemand\" : true } ] }, \"scrub\" : { \"interval\" : \"24h\" } } } Refer to Configuring zot for more details about configuration file options. TLS encryption \u00b6 We recommend using a certificate authority such as Let\u2019s Encrypt that offers TLS encryption, as shown in this configuration example: \"tls\" : { \"cert\" : \"/etc/letsencrypt/live/zothub.io/fullchain.pem\" , \"key\" : \"/etc/letsencrypt/live/zothub.io/privkey.pem\" } Registry synchronization \u00b6 The example file enables registry synchronization with two other container registries. In the example, the zot server synchronizes with the Google and Docker container registries, as shown here: \"sync\" : { \"enable\" : false , \"registries\" : [ { \"urls\" : [ \"https://mirror.gcr.io/library\" ], \"onDemand\" : true , \"maxRetries\" : 3 , \"retryDelay\" : \"5m\" , \"pollInterval\" : \"6h\" }, { \"urls\" : [ \"https://docker.io/library\" ], \"onDemand\" : true } ] }","title":"Installing zot on Bare Metal Linux"},{"location":"install-guides/install-guide-linux/#installing-zot-on-bare-metal-linux","text":"","title":"Installing zot on Bare Metal Linux"},{"location":"install-guides/install-guide-linux/#before-you-begin","text":"","title":"Before you begin"},{"location":"install-guides/install-guide-linux/#about-binary-images","text":"Executable binary zot images are available for multiple platforms and architectures and with full or minimal implementations. Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats.","title":"About binary images"},{"location":"install-guides/install-guide-linux/#installation","text":"","title":"Installation"},{"location":"install-guides/install-guide-linux/#step-1-get-zot","text":"Using wget, download the appropriate zot binary image for your platform from the zot GitHub project . Download the image to the`/usr/bin/` directory and rename it to zot, as in this example: $ wget -O /usr/bin/zot https://github.com/project-zot/zot/releases/download/v1.4.2-rc2/zot-linux-amd64","title":"Step 1: Get zot"},{"location":"install-guides/install-guide-linux/#step-2-create-a-zot-configuration-file","text":"Create a zot configuration file as /etc/zot/config.json . See Configuration file options for an example file with options and recommendations. You can find other configuration file examples in the zot GitHub project and in Configuring zot .","title":"Step 2: Create a zot configuration file"},{"location":"install-guides/install-guide-linux/#step-3-configure-a-local-authentication-account","text":"If you want to use local authentication with zot, create a /etc/zot/htpasswd file with an initial account entry using the htpasswd command as in this example: $ htpasswd -bnB myUserName myPassword > /etc/zot/htpasswd To add additional local users, use the >> redirect as in this example: $ htpasswd -bnB myUserName2 myPassword2 >> /etc/zot/htpasswd","title":"Step 3: Configure a local authentication account"},{"location":"install-guides/install-guide-linux/#step-4-define-the-zot-service","text":"Create a /etc/systemd/system/zot.service file to define the zot service in systemd. The following is an example service file for zot: [Unit] Description=OCI Distribution Registry Documentation=https://zotregistry.io/ After=network.target auditd.service local-fs.target [Service] Type=simple ExecStart=/usr/bin/zot serve /etc/zot/config.json Restart=on-failure User=zot Group=zot LimitNOFILE=500000 MemoryHigh=30G MemoryMax=32G [Install] WantedBy=multi-user.target Note: Be sure to configure a dedicated non-root user ID as the User and Group in the zot service definition. The 'zot' user ID in this example is created in the next step.","title":"Step 4: Define the zot service"},{"location":"install-guides/install-guide-linux/#step-5-create-a-user-id-to-own-the-zot-service","text":"Create a non-root user ID to be the owner of the zot service and its resources. In this example, the user ID 'zot' is created with the adduser command, and resource ownership is assigned. $ sudo adduser --no-create-home --disabled-password --gecos --disabled-login zot $ sudo mkdir -p /data/zot $ sudo chown -R zot:zot /data/zot $ sudo mkdir -p /var/log/zot $ sudo chown -R zot:zot /var/log/zot $ sudo chown root:root /usr/bin/zot $ sudo chown root:root config.json With the adduser options shown, the 'zot' user ID has no local directory. There is no ability to log into the zot user account, and the account has no finger information.","title":"Step 5: Create a user ID to own the zot service"},{"location":"install-guides/install-guide-linux/#step-6-start-zot","text":"Enable and start the zot service with these commands: $ sudo systemctl enable zot $ sudo systemctl start zot When the zot service has started, you can check its status with this command: $ sudo systemctl status zot","title":"Step 6: Start zot"},{"location":"install-guides/install-guide-linux/#after-the-installation","text":"If your zot registry server is public facing, we recommend that you test your TLS configuration using a service such as the Qualys SSL Server Test . Refer to Configuring zot for further information about maintaining your zot registry server.","title":"After the installation"},{"location":"install-guides/install-guide-linux/#configuration-file-options-and-recommendations","text":"The following zot configuration file ( config.json ) can be used as a template for your own installation. You can modify this file to suit your own environment. Click here to view the sample configuration file. { \"distSpecVersion\" : \"1.0.1\" , \"storage\" :{ \"dedupe\" : true , \"gc\" : true , \"gcDelay\" : \"1h\" , \"gcInterval\" : \"6h\" , \"rootDirectory\" : \"/data/zot/\" }, \"http\" : { \"address\" : \"0.0.0.0\" , \"port\" : \"443\" , \"realm\" : \"zot\" , \"tls\" : { \"cert\" : \"/etc/letsencrypt/live/zothub.io/fullchain.pem\" , \"key\" : \"/etc/letsencrypt/live/zothub.io/privkey.pem\" }, \"auth\" : { \"htpasswd\" : { \"path\" : \"/etc/zot/htpasswd\" }, \"failDelay\" : 5 }, \"allowReadAccess\" : true }, \"log\" :{ \"level\" : \"debug\" , \"output\" : \"/var/log/zot/zot.log\" , \"audit\" : \"/var/log/zot/zot-audit.log\" }, \"extensions\" : { \"search\" : { \"enable\" : true , \"cve\" : { \"updateInterval\" : \"24h\" } }, \"sync\" : { \"enable\" : false , \"registries\" : [ { \"urls\" : [ \"https://mirror.gcr.io/library\" ], \"onDemand\" : true , \"maxRetries\" : 3 , \"retryDelay\" : \"5m\" , \"pollInterval\" : \"6h\" }, { \"urls\" : [ \"https://docker.io/library\" ], \"onDemand\" : true } ] }, \"scrub\" : { \"interval\" : \"24h\" } } } Refer to Configuring zot for more details about configuration file options.","title":"Configuration file options and recommendations"},{"location":"install-guides/install-guide-linux/#tls-encryption","text":"We recommend using a certificate authority such as Let\u2019s Encrypt that offers TLS encryption, as shown in this configuration example: \"tls\" : { \"cert\" : \"/etc/letsencrypt/live/zothub.io/fullchain.pem\" , \"key\" : \"/etc/letsencrypt/live/zothub.io/privkey.pem\" }","title":"TLS encryption"},{"location":"install-guides/install-guide-linux/#registry-synchronization","text":"The example file enables registry synchronization with two other container registries. In the example, the zot server synchronizes with the Google and Docker container registries, as shown here: \"sync\" : { \"enable\" : false , \"registries\" : [ { \"urls\" : [ \"https://mirror.gcr.io/library\" ], \"onDemand\" : true , \"maxRetries\" : 3 , \"retryDelay\" : \"5m\" , \"pollInterval\" : \"6h\" }, { \"urls\" : [ \"https://docker.io/library\" ], \"onDemand\" : true } ] }","title":"Registry synchronization"},{"location":"user-guides/user-guide-datapath/","text":"Push and Pull Image Content \u00b6 A zot registry can store and serve a variety of content, but the type of content may dictate your choice of a client tool. For various content types, this document shows examples of using a third-party client tool that supports the content. The following table shows which content and client tools are demonstrated. Content Type Client OCI images skopeo OCI images regclient ( regctl ) OCI artifacts oras Helm charts helm Note: In the following examples, the zot registry is located at localhost, using port number 5000. Common tasks using skopeo for OCI images \u00b6 skopeo is a command line client that performs various operations on OCI container images and image repositories. Note: For detailed information about using skopeo, see the skopeo man page . Push an OCI image \u00b6 This example pushes the latest container image for the busybox application to a zot registry. $ skopeo --insecure-policy copy --dest-tls-verify=false --multi-arch=all \\ --format=oci docker://busybox:latest \\ docker://localhost:5000/busybox:latest Pull an OCI image \u00b6 This example pulls the latest container image for the busybox application and stores the image to a local OCI-layout directory ( /oci/images ). $ skopeo --insecure-policy copy --src-tls-verify=false --multi-arch=all \\ docker://localhost:5000/busybox:latest \\ oci:/oci/images:busybox:latest Pull an OCI image to a private docker registry \u00b6 This example pulls the latest container image for the busybox application and stores the image to a local private docker registry. $ skopeo --insecure-policy copy --src-tls-verify=false --multi-arch=all \\ docker://localhost:5000/busybox:latest \\ docker://localhost:5000/busybox:latest Authentication \u00b6 In these examples, authentication is disabled for the source and destination. You can enable authentication by changing the command line options as follows: --src-tls-verify=true --dest-tls-verify=true You can also add credentials for authenticating with a source or destination repository: --src-creds username:password --dest-creds username:password Common tasks using regclient for OCI images \u00b6 regclient is a client interface that performs various operations on OCI container images and image repositories. The command line interface for regclient is regctl. Note: For detailed information about regctl commands, see the regctl Documentation . Push an OCI image \u00b6 This example pushes version 1.18 of golang to a tools repository within the registry. $ regctl registry set --tls=disabled localhost:5000 $ regctl image copy ocidir://path/to/golang:1.18 localhost:5000/tools Pull an OCI image \u00b6 This example pulls version 1.18 of golang to a local OCI-layout directory. $ regctl image copy localhost:5000/tools ocidir://path/to/golang:1.18 List all repositories in registry \u00b6 This example list all repositories in the registry. $ regctl repo ls localhost:5000 List tags \u00b6 This example lists all tags in the tools repository within the registry. $ regctl tag ls localhost:5000/tools Pull and push manifest \u00b6 This example pulls and pushes the manifest in the tools repository within the registry. $ regctl manifest get localhost:5000/tools --format=raw-body $ regctl manifest put localhost:5000/tools:1.0.0 \\ --format oci --content-type application/vnd.oci.image.manifest.v1+json \\ --format oci Authentication \u00b6 In the preceding examples, TLS authentication with the zot registry was disabled by the following command: $ regctl registry set --tls=disabled localhost:5000 This command allows regctl to accept an HTTP response from the zot server. If TLS authentication is enabled on the zot registry server, you can omit this command from your regctl session. Common tasks using oras for OCI artifacts \u00b6 ORAS (OCI Registry As Storage) is a command line client for storing OCI artifacts on OCI repositories. Note: For detailed information about the oras commands in these examples, see the ORAS CLI documentation . Push an artifact \u00b6 This example pushes version 2 of an artifact file named hello-artifact to a zot registry. $ oras push --plain-http localhost:5000/hello-artifact:v2 \\ --config config.json:application/vnd.acme.rocket.config.v1+json \\ artifact.txt:text/plain -d -v Pull an artifact \u00b6 This example pulls version 2 of an artifact file named hello-artifact from a zot registry. $ oras pull --plain-http localhost:5000/hello-artifact:v2 -d -v Attach a reference \u00b6 $ echo '{\"artifact\": \"localhost:5000/hello-artifact:v2\", \"signature\": \"pat hancock\"}' > signature.json $ oras push localhost:5000/hello-artifact \\ --artifact-type 'signature/example' \\ --subject localhost:5000/hello-artifact:v2 \\ ./signature.json:application/json $ oras discover -o tree localhost:5000/hello-artifact:v2 Authentication \u00b6 To authenticate with the zot server, log in at the start of your session using the following command: $ oras login -u myUsername -p myPassword localhost:5000 You can also add credentials in the push or pull commands as in this example: $ oras pull -u myUsername -p myPassword localhost:5000/hello-artifact:v2 -d -v Note: For additional authentication options, including interactive credential entry and disabling TLS, see the ORAS login documentation . Common tasks using helm for helm charts \u00b6 Helm is a package manager for Kubernetes. Among many other capabilities, helm can store and retrieve helm charts on OCI image repositories. Note: For detailed information about the helm commands in these examples, see Commands for working with registries in the helm documentation. Push a helm chart \u00b6 This example pushes version 1.2.3 of a zot helm chart to a zot-chart repository within the registry. $ helm package path/to/helm-charts/charts/zot $ helm push zot-1.2.3.tgz oci://localhost:5000/zot-chart Pull a helm chart \u00b6 This example pulls version 1.2.3 of a zot helm chart from a zot-chart repository within the registry. $ helm pull oci://localhost:5000/zot-chart/zot --version 1.2.3 Authentication \u00b6 To authenticate with the zot server, log in at the start of your session using the following command: $ helm registry login -u myUsername localhost:5000 You will be prompted to manually enter a password.","title":"Push and Pull Image Content"},{"location":"user-guides/user-guide-datapath/#push-and-pull-image-content","text":"A zot registry can store and serve a variety of content, but the type of content may dictate your choice of a client tool. For various content types, this document shows examples of using a third-party client tool that supports the content. The following table shows which content and client tools are demonstrated. Content Type Client OCI images skopeo OCI images regclient ( regctl ) OCI artifacts oras Helm charts helm Note: In the following examples, the zot registry is located at localhost, using port number 5000.","title":"Push and Pull Image Content"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-skopeo-for-oci-images","text":"skopeo is a command line client that performs various operations on OCI container images and image repositories. Note: For detailed information about using skopeo, see the skopeo man page .","title":"Common tasks using skopeo for OCI images"},{"location":"user-guides/user-guide-datapath/#push-an-oci-image","text":"This example pushes the latest container image for the busybox application to a zot registry. $ skopeo --insecure-policy copy --dest-tls-verify=false --multi-arch=all \\ --format=oci docker://busybox:latest \\ docker://localhost:5000/busybox:latest","title":"Push an OCI image"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image","text":"This example pulls the latest container image for the busybox application and stores the image to a local OCI-layout directory ( /oci/images ). $ skopeo --insecure-policy copy --src-tls-verify=false --multi-arch=all \\ docker://localhost:5000/busybox:latest \\ oci:/oci/images:busybox:latest","title":"Pull an OCI image"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image-to-a-private-docker-registry","text":"This example pulls the latest container image for the busybox application and stores the image to a local private docker registry. $ skopeo --insecure-policy copy --src-tls-verify=false --multi-arch=all \\ docker://localhost:5000/busybox:latest \\ docker://localhost:5000/busybox:latest","title":"Pull an OCI image to a private docker registry"},{"location":"user-guides/user-guide-datapath/#authentication","text":"In these examples, authentication is disabled for the source and destination. You can enable authentication by changing the command line options as follows: --src-tls-verify=true --dest-tls-verify=true You can also add credentials for authenticating with a source or destination repository: --src-creds username:password --dest-creds username:password","title":"Authentication"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-regclient-for-oci-images","text":"regclient is a client interface that performs various operations on OCI container images and image repositories. The command line interface for regclient is regctl. Note: For detailed information about regctl commands, see the regctl Documentation .","title":"Common tasks using regclient for OCI images"},{"location":"user-guides/user-guide-datapath/#push-an-oci-image_1","text":"This example pushes version 1.18 of golang to a tools repository within the registry. $ regctl registry set --tls=disabled localhost:5000 $ regctl image copy ocidir://path/to/golang:1.18 localhost:5000/tools","title":"Push an OCI image"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image_1","text":"This example pulls version 1.18 of golang to a local OCI-layout directory. $ regctl image copy localhost:5000/tools ocidir://path/to/golang:1.18","title":"Pull an OCI image"},{"location":"user-guides/user-guide-datapath/#list-all-repositories-in-registry","text":"This example list all repositories in the registry. $ regctl repo ls localhost:5000","title":"List all repositories in registry"},{"location":"user-guides/user-guide-datapath/#list-tags","text":"This example lists all tags in the tools repository within the registry. $ regctl tag ls localhost:5000/tools","title":"List tags"},{"location":"user-guides/user-guide-datapath/#pull-and-push-manifest","text":"This example pulls and pushes the manifest in the tools repository within the registry. $ regctl manifest get localhost:5000/tools --format=raw-body $ regctl manifest put localhost:5000/tools:1.0.0 \\ --format oci --content-type application/vnd.oci.image.manifest.v1+json \\ --format oci","title":"Pull and push manifest"},{"location":"user-guides/user-guide-datapath/#authentication_1","text":"In the preceding examples, TLS authentication with the zot registry was disabled by the following command: $ regctl registry set --tls=disabled localhost:5000 This command allows regctl to accept an HTTP response from the zot server. If TLS authentication is enabled on the zot registry server, you can omit this command from your regctl session.","title":"Authentication"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-oras-for-oci-artifacts","text":"ORAS (OCI Registry As Storage) is a command line client for storing OCI artifacts on OCI repositories. Note: For detailed information about the oras commands in these examples, see the ORAS CLI documentation .","title":"Common tasks using oras for OCI artifacts"},{"location":"user-guides/user-guide-datapath/#push-an-artifact","text":"This example pushes version 2 of an artifact file named hello-artifact to a zot registry. $ oras push --plain-http localhost:5000/hello-artifact:v2 \\ --config config.json:application/vnd.acme.rocket.config.v1+json \\ artifact.txt:text/plain -d -v","title":"Push an artifact"},{"location":"user-guides/user-guide-datapath/#pull-an-artifact","text":"This example pulls version 2 of an artifact file named hello-artifact from a zot registry. $ oras pull --plain-http localhost:5000/hello-artifact:v2 -d -v","title":"Pull an artifact"},{"location":"user-guides/user-guide-datapath/#attach-a-reference","text":"$ echo '{\"artifact\": \"localhost:5000/hello-artifact:v2\", \"signature\": \"pat hancock\"}' > signature.json $ oras push localhost:5000/hello-artifact \\ --artifact-type 'signature/example' \\ --subject localhost:5000/hello-artifact:v2 \\ ./signature.json:application/json $ oras discover -o tree localhost:5000/hello-artifact:v2","title":"Attach a reference"},{"location":"user-guides/user-guide-datapath/#authentication_2","text":"To authenticate with the zot server, log in at the start of your session using the following command: $ oras login -u myUsername -p myPassword localhost:5000 You can also add credentials in the push or pull commands as in this example: $ oras pull -u myUsername -p myPassword localhost:5000/hello-artifact:v2 -d -v Note: For additional authentication options, including interactive credential entry and disabling TLS, see the ORAS login documentation .","title":"Authentication"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-helm-for-helm-charts","text":"Helm is a package manager for Kubernetes. Among many other capabilities, helm can store and retrieve helm charts on OCI image repositories. Note: For detailed information about the helm commands in these examples, see Commands for working with registries in the helm documentation.","title":"Common tasks using helm for helm charts"},{"location":"user-guides/user-guide-datapath/#push-a-helm-chart","text":"This example pushes version 1.2.3 of a zot helm chart to a zot-chart repository within the registry. $ helm package path/to/helm-charts/charts/zot $ helm push zot-1.2.3.tgz oci://localhost:5000/zot-chart","title":"Push a helm chart"},{"location":"user-guides/user-guide-datapath/#pull-a-helm-chart","text":"This example pulls version 1.2.3 of a zot helm chart from a zot-chart repository within the registry. $ helm pull oci://localhost:5000/zot-chart/zot --version 1.2.3","title":"Pull a helm chart"},{"location":"user-guides/user-guide-datapath/#authentication_3","text":"To authenticate with the zot server, log in at the start of your session using the following command: $ helm registry login -u myUsername localhost:5000 You will be prompted to manually enter a password.","title":"Authentication"},{"location":"user-guides/zli/","text":"Using the command line interface (zli) \u00b6 zli: The command line tool for zot servers What is zli? \u00b6 zli is a binary that implements a set of command line commands for interacting with the zot registry server. Tip: We recommend installing zli when you install zot . How to get zli \u00b6 zli is hosted with zot on GitHub at project-zot . From GitHub, you can download the zli binary or you can build zli from the source. Supported platforms \u00b6 zli is supported for the following operating systems and platform architectures: OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS Downloading zli binaries \u00b6 You can download the executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page. The binary image is named using the OS and architecture from the Supported platforms table. For example, the binary for an Intel-based MacOS server is zli-darwin-amd64. Building zli from source \u00b6 To build the zli binary, copy or clone the zot project from GitHub and execute the make cli command in the zot directory. Use the same command options that you used to build zot, as shown: make OS=os ARCH=architecture cli For example, the following command builds zli for an Intel-based MacOS server: make OS=darwin ARCH=amd64 cli In this example, the resulting executable file is zli-darwin-amd64 in the zot/bin directory. Common tasks using zli \u00b6 This section includes examples of common zot server tasks using the zli command line interface. For a detailed listing of zli commands, see the zli Command Reference in this guide. Tip: For convenience, you can rename the binary image file to simply zot .The instructions and examples in this guide use zli as the name of the executable file. The original filename of the executable file will reflect the build options, such as zli-linux-amd64 . For convenience, you can rename the executable to simply zli . Adding a zot server URL \u00b6 You can modify the zot server configuration using the zli config add command. This example adds a zot server URL with an alias of remote-zot : bin/zli config add remote-zot https://server-example:8080 Use the zli config command to list all configured URLs with their aliases: $ bin/zli config -l remote-zot https://server-example:8080 local http://localhost:8080 Listing images \u00b6 You can list all images hosted on a zot server using the zli images command with the server\u2019s alias: $ bin/zli images remote-zot IMAGE NAME TAG DIGEST SIZE postgres 9.6.18-alpine ef27f3e1 14.4MB postgres 9.5-alpine 264450a7 14.4MB busybox latest 414aeb86 707.8KB You can also filter the image list to view a specific image by specifying the image name: $ bin/zli images remote-zot -n busybox IMAGE NAME TAG DIGEST SIZE busybox latest 414aeb86 707.8KB Scanning images for known vulnerabilities \u00b6 Using the zli cve command, you can fetch the CVE (Common Vulnerabilities and Exposures) information for images hosted on the zot server. This example shows how to learn which images are affected by a specific CVE: $ bin/zli cve remote-zot -i CVE-2017-9935 IMAGE NAME TAG DIGEST SIZE c3/openjdk-dev commit-5be4d92 ac3762e2 335MB This example displays a list all CVEs affecting a specific image: $ bin/zli cve remote-zot -I c3/openjdk-dev:0.3.19 ID SEVERITY TITLE CVE-2015-8540 LOW libpng: underflow read in png_check_keyword() CVE-2017-16826 LOW binutils: Invalid memory access in the coff_s... This example displays the detailed CVEs in JSON format: $ bin/zli cve remote-zot -I c3/openjdk-dev:0.3.19 -o json { \"Tag\": \"0.3.19\", \"CVEList\": [ { \"Id\": \"CVE-2019-17006\", \"Severity\": \"MEDIUM\", \"Title\": \"nss: Check length of inputs for cryptographic primitives\", \"Description\": \"A vulnerability was discovered in nss where input text length was not checked when using certain cryptographic primitives. This could lead to a heap-buffer overflow resulting in a crash and data leak. The highest threat is to confidentiality and integrity of data as well as system availability.\", \"PackageList\": [ { \"Name\": \"nss\", \"InstalledVersion\": \"3.44.0-7.el7_7\", \"FixedVersion\": \"Not Specified\" }, { \"Name\": \"nss-sysinit\", \"InstalledVersion\": \"3.44.0-7.el7_7\", \"FixedVersion\": \"Not Specified\" }, { \"Name\": \"nss-tools\", \"InstalledVersion\": \"3.44.0-7.el7_7\", \"FixedVersion\": \"Not Specified\" }] }] } This example lists all images on a specific zot server that are affected by a specific CVE: $ bin/zli cve remote-zot -I c3/openjdk-dev -i CVE-2017-9935 IMAGE NAME TAG DIGEST SIZE c3/openjdk-dev commit-2674e8a 71046748 338MB c3/openjdk-dev commit-bd5cc94 0ab7fc76 This example lists all images on a specific zot server where the CVE has been fixed: $ bin/zli cve remote-zot -I c3/openjdk-dev -i CVE-2017-9935 --fixed IMAGE NAME TAG DIGEST SIZE c3/openjdk-dev commit-2674e8a-squashfs b545b8ba 321MB c3/openjdk-dev commit-d5024ec-squashfs cd45f8cf 321MB Listing repositories \u00b6 You can list all repositories hosted on a zot server using the zli repos command with the server\u2019s alias: Searching... \ud83c\udf0d REPOSITORY NAME alpine busybox Command reference \u00b6 zli \u00b6 $ bin/zli --help Usage: zli [flags] zli [command] Available Commands: completion Generate the autocompletion script for the specified shell config Configure zot registry parameters for CLI cve Lookup CVEs in images hosted on the zot registry help Help about any command images List images hosted on the zot registry Flags: -h, --help help for zli -v, --version show the version and exit Use \"zli [command] --help\" for more information about a command. zli completion \u00b6 This command generates the autocompletion script for zli for the specified shell. See each sub-command\u2019s help for details on how to use the generated script. $ bin/zli completion --help Usage: zli completion [command] Available Commands: bash Generate the autocompletion script for bash fish Generate the autocompletion script for fish powershell Generate the autocompletion script for powershell zsh Generate the autocompletion script for zsh Flags: -h, --help help for completion Use \"zli completion [command] --help\" for more information about a command. zli config \u00b6 This command modifies and lists modified settings for a running zot registry. $ bin/zli config --help Usage: zli config <config-name> [variable] [value] [flags] zli config [command] Examples: zli config add main https://zot-foo.com:8080 zli config main url zli config main --list zli config --list Available Commands: add Add configuration for a zot registry Flags: -h, --help help for config -l, --list List configurations --reset Reset a variable value Use \"zli config [command] --help\" for more information about a command. Useful variables: url zot server URL showspinner show spinner while loading data [true/false] verify-tls enable TLS certificate verification of the server [default: true] zli cve \u00b6 This command lists CVEs (Common Vulnerabilities and Exposures) of images hosted on the zot registry $ ./zli cve --help Usage: zli cve [config-name] [flags] Flags: -i, --cve-id string List images affected by a CVE --fixed List tags which have fixed a CVE -h, --help help for cve -I, --image string List CVEs by IMAGENAME[:TAG] -o, --output string Specify output format [text/json/yaml]. JSON and YAML format return all info for CVEs --url string Specify zot server URL if config-name is not mentioned -u, --user string User Credentials of zot server in USERNAME:PASSWORD format zli images \u00b6 This command lists images hosted on the zot registry. $ ./zli images --help Usage: zli images [config-name] [flags] Flags: -d, --digest string List images containing a specific manifest, config, or layer digest -h, --help help for images -n, --name string List image details by name -o, --output string Specify output format [text/json/yaml] --url string Specify zot server URL if config-name is not mentioned -u, --user string User Credentials of zot server in \"username:password\" format --verbose Show verbose output Run 'zli config -h' for details on [config-name] argument zli repos \u00b6 This command lists all repositories in the zot registry. $ ./zli repos --help Usage: zli repos [config-name] [flags] Flags: -h, --help help for repos --url string Specify zot server URL if config-name is not mentioned -u, --user string User Credentials of zot server in \"username:password\" format Run 'zli config -h' for details on [config-name] argument","title":"Command Line (zli)"},{"location":"user-guides/zli/#using-the-command-line-interface-zli","text":"zli: The command line tool for zot servers","title":"Using the command line interface (zli)"},{"location":"user-guides/zli/#what-is-zli","text":"zli is a binary that implements a set of command line commands for interacting with the zot registry server. Tip: We recommend installing zli when you install zot .","title":"What is zli?"},{"location":"user-guides/zli/#how-to-get-zli","text":"zli is hosted with zot on GitHub at project-zot . From GitHub, you can download the zli binary or you can build zli from the source.","title":"How to get zli"},{"location":"user-guides/zli/#supported-platforms","text":"zli is supported for the following operating systems and platform architectures: OS ARCH Platform linux amd64 Intel-based Linux servers linux arm64 ARM-based servers and Raspberry Pi4 darwin amd64 Intel-based MacOS darwin arm64 ARM-based MacOS","title":"Supported platforms"},{"location":"user-guides/zli/#downloading-zli-binaries","text":"You can download the executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page. The binary image is named using the OS and architecture from the Supported platforms table. For example, the binary for an Intel-based MacOS server is zli-darwin-amd64.","title":"Downloading zli binaries"},{"location":"user-guides/zli/#building-zli-from-source","text":"To build the zli binary, copy or clone the zot project from GitHub and execute the make cli command in the zot directory. Use the same command options that you used to build zot, as shown: make OS=os ARCH=architecture cli For example, the following command builds zli for an Intel-based MacOS server: make OS=darwin ARCH=amd64 cli In this example, the resulting executable file is zli-darwin-amd64 in the zot/bin directory.","title":"Building zli from source"},{"location":"user-guides/zli/#common-tasks-using-zli","text":"This section includes examples of common zot server tasks using the zli command line interface. For a detailed listing of zli commands, see the zli Command Reference in this guide. Tip: For convenience, you can rename the binary image file to simply zot .The instructions and examples in this guide use zli as the name of the executable file. The original filename of the executable file will reflect the build options, such as zli-linux-amd64 . For convenience, you can rename the executable to simply zli .","title":"Common tasks using zli"},{"location":"user-guides/zli/#adding-a-zot-server-url","text":"You can modify the zot server configuration using the zli config add command. This example adds a zot server URL with an alias of remote-zot : bin/zli config add remote-zot https://server-example:8080 Use the zli config command to list all configured URLs with their aliases: $ bin/zli config -l remote-zot https://server-example:8080 local http://localhost:8080","title":"Adding a zot server URL"},{"location":"user-guides/zli/#listing-images","text":"You can list all images hosted on a zot server using the zli images command with the server\u2019s alias: $ bin/zli images remote-zot IMAGE NAME TAG DIGEST SIZE postgres 9.6.18-alpine ef27f3e1 14.4MB postgres 9.5-alpine 264450a7 14.4MB busybox latest 414aeb86 707.8KB You can also filter the image list to view a specific image by specifying the image name: $ bin/zli images remote-zot -n busybox IMAGE NAME TAG DIGEST SIZE busybox latest 414aeb86 707.8KB","title":"Listing images"},{"location":"user-guides/zli/#scanning-images-for-known-vulnerabilities","text":"Using the zli cve command, you can fetch the CVE (Common Vulnerabilities and Exposures) information for images hosted on the zot server. This example shows how to learn which images are affected by a specific CVE: $ bin/zli cve remote-zot -i CVE-2017-9935 IMAGE NAME TAG DIGEST SIZE c3/openjdk-dev commit-5be4d92 ac3762e2 335MB This example displays a list all CVEs affecting a specific image: $ bin/zli cve remote-zot -I c3/openjdk-dev:0.3.19 ID SEVERITY TITLE CVE-2015-8540 LOW libpng: underflow read in png_check_keyword() CVE-2017-16826 LOW binutils: Invalid memory access in the coff_s... This example displays the detailed CVEs in JSON format: $ bin/zli cve remote-zot -I c3/openjdk-dev:0.3.19 -o json { \"Tag\": \"0.3.19\", \"CVEList\": [ { \"Id\": \"CVE-2019-17006\", \"Severity\": \"MEDIUM\", \"Title\": \"nss: Check length of inputs for cryptographic primitives\", \"Description\": \"A vulnerability was discovered in nss where input text length was not checked when using certain cryptographic primitives. This could lead to a heap-buffer overflow resulting in a crash and data leak. The highest threat is to confidentiality and integrity of data as well as system availability.\", \"PackageList\": [ { \"Name\": \"nss\", \"InstalledVersion\": \"3.44.0-7.el7_7\", \"FixedVersion\": \"Not Specified\" }, { \"Name\": \"nss-sysinit\", \"InstalledVersion\": \"3.44.0-7.el7_7\", \"FixedVersion\": \"Not Specified\" }, { \"Name\": \"nss-tools\", \"InstalledVersion\": \"3.44.0-7.el7_7\", \"FixedVersion\": \"Not Specified\" }] }] } This example lists all images on a specific zot server that are affected by a specific CVE: $ bin/zli cve remote-zot -I c3/openjdk-dev -i CVE-2017-9935 IMAGE NAME TAG DIGEST SIZE c3/openjdk-dev commit-2674e8a 71046748 338MB c3/openjdk-dev commit-bd5cc94 0ab7fc76 This example lists all images on a specific zot server where the CVE has been fixed: $ bin/zli cve remote-zot -I c3/openjdk-dev -i CVE-2017-9935 --fixed IMAGE NAME TAG DIGEST SIZE c3/openjdk-dev commit-2674e8a-squashfs b545b8ba 321MB c3/openjdk-dev commit-d5024ec-squashfs cd45f8cf 321MB","title":"Scanning images for known vulnerabilities"},{"location":"user-guides/zli/#listing-repositories","text":"You can list all repositories hosted on a zot server using the zli repos command with the server\u2019s alias: Searching... \ud83c\udf0d REPOSITORY NAME alpine busybox","title":"Listing repositories"},{"location":"user-guides/zli/#command-reference","text":"","title":"Command reference"},{"location":"user-guides/zli/#zli","text":"$ bin/zli --help Usage: zli [flags] zli [command] Available Commands: completion Generate the autocompletion script for the specified shell config Configure zot registry parameters for CLI cve Lookup CVEs in images hosted on the zot registry help Help about any command images List images hosted on the zot registry Flags: -h, --help help for zli -v, --version show the version and exit Use \"zli [command] --help\" for more information about a command.","title":"zli"},{"location":"user-guides/zli/#zli-completion","text":"This command generates the autocompletion script for zli for the specified shell. See each sub-command\u2019s help for details on how to use the generated script. $ bin/zli completion --help Usage: zli completion [command] Available Commands: bash Generate the autocompletion script for bash fish Generate the autocompletion script for fish powershell Generate the autocompletion script for powershell zsh Generate the autocompletion script for zsh Flags: -h, --help help for completion Use \"zli completion [command] --help\" for more information about a command.","title":"zli completion"},{"location":"user-guides/zli/#zli-config","text":"This command modifies and lists modified settings for a running zot registry. $ bin/zli config --help Usage: zli config <config-name> [variable] [value] [flags] zli config [command] Examples: zli config add main https://zot-foo.com:8080 zli config main url zli config main --list zli config --list Available Commands: add Add configuration for a zot registry Flags: -h, --help help for config -l, --list List configurations --reset Reset a variable value Use \"zli config [command] --help\" for more information about a command. Useful variables: url zot server URL showspinner show spinner while loading data [true/false] verify-tls enable TLS certificate verification of the server [default: true]","title":"zli config"},{"location":"user-guides/zli/#zli-cve","text":"This command lists CVEs (Common Vulnerabilities and Exposures) of images hosted on the zot registry $ ./zli cve --help Usage: zli cve [config-name] [flags] Flags: -i, --cve-id string List images affected by a CVE --fixed List tags which have fixed a CVE -h, --help help for cve -I, --image string List CVEs by IMAGENAME[:TAG] -o, --output string Specify output format [text/json/yaml]. JSON and YAML format return all info for CVEs --url string Specify zot server URL if config-name is not mentioned -u, --user string User Credentials of zot server in USERNAME:PASSWORD format","title":"zli cve"},{"location":"user-guides/zli/#zli-images","text":"This command lists images hosted on the zot registry. $ ./zli images --help Usage: zli images [config-name] [flags] Flags: -d, --digest string List images containing a specific manifest, config, or layer digest -h, --help help for images -n, --name string List image details by name -o, --output string Specify output format [text/json/yaml] --url string Specify zot server URL if config-name is not mentioned -u, --user string User Credentials of zot server in \"username:password\" format --verbose Show verbose output Run 'zli config -h' for details on [config-name] argument","title":"zli images"},{"location":"user-guides/zli/#zli-repos","text":"This command lists all repositories in the zot registry. $ ./zli repos --help Usage: zli repos [config-name] [flags] Flags: -h, --help help for repos --url string Specify zot server URL if config-name is not mentioned -u, --user string User Credentials of zot server in \"username:password\" format Run 'zli config -h' for details on [config-name] argument","title":"zli repos"}]}